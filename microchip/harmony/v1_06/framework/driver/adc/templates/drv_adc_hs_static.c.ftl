/*******************************************************************************
  ADC Driver Initialization File

  File Name:
    drv_adc_static_hs.c

  Summary:
    This file contains source code necessary to initialize the IC driver.

  Description:
    This file contains source code necessary to initialize the system.  It
    implements the "DRV_ADC_Initialize" function, configuration bits, and allocates
    any necessary global system resources, such as the systemObjects structure
    that contains the object handles to all the MPLAB Harmony module objects in
    the system.
 *******************************************************************************/

/*******************************************************************************
Copyright (c) 2013-2014 released Microchip Technology Inc.  All rights reserved.

Microchip licenses to you the right to use, modify, copy and distribute
Software only when embedded on a Microchip microcontroller or digital signal
controller that is integrated into your product or third party product
(pursuant to the sublicense terms in the accompanying license agreement).

You should refer to the license agreement accompanying this Software for
additional information regarding your rights and obligations.

SOFTWARE AND DOCUMENTATION ARE PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF
MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER
CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR
OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR
CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF
SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
(INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
 *******************************************************************************/

// *****************************************************************************
// *****************************************************************************
// Section: Include Files
// *****************************************************************************
// *****************************************************************************
#include "framework/driver/adc/drv_adc_static.h"
 
<#if CONFIG_USE_DRV_ADC == true>
<#if CONFIG_DRV_ADCHS_DRIVER_MODE == "STATIC">
// *****************************************************************************
// *****************************************************************************
// Section: ADC Static Driver Functions
// *****************************************************************************
// *****************************************************************************
void DRV_ADC_Initialize(void)
{
    /* Select Power Mode */
<#if CONFIG_DRV_ADCHS_POWER_STATE == "SYS_MODULE_POWER_IDLE_STOP">
<#if CONFIG_DRV_ADCHS_INTERRUPT_VECTOR_BASE?has_content>	
	PLIB_ADCHS_Setup(
	DRV_ADC_ID_1,
	${(CONFIG_DRV_ADC_VOLTAGE_REFERENCE_ADCHS)},
	${(CONFIG_DRV_ADCHS_CHARGEPUMP_MODE)},
	${(CONFIG_DRV_ADCHS_OUTPUT_DATA_FORMAT)},
	true,
	${(CONFIG_DRV_ADCHS_FAST_SYNC_SYSTEM_CLOCK)},
	${(CONFIG_DRV_ADCHS_FAST_SYNC_PERIPHERAL_CLOCK)},
	${(CONFIG_DRV_ADCHS_INTERRUPT_BIT_SHIFT_LEFT)},
	${(CONFIG_DRV_ADCHS_INTERRUPT_VECTOR_BASE)},
	${(CONFIG_DRV_ADCHS_CLOCK_SOURCE)},
	${(CONFIG_DRV_ADCHS_CLOCK_DIVIDER)},
	${(CONFIG_DRV_ADCHS_WARMUP_CLOCK)}
	);
<#else>
	PLIB_ADCHS_Setup(
	DRV_ADC_ID_1,
	${(CONFIG_DRV_ADC_VOLTAGE_REFERENCE_ADCHS)},
	${(CONFIG_DRV_ADCHS_CHARGEPUMP_MODE)},
	${(CONFIG_DRV_ADCHS_OUTPUT_DATA_FORMAT)},
	true,
	${(CONFIG_DRV_ADCHS_FAST_SYNC_SYSTEM_CLOCK)},
	${(CONFIG_DRV_ADCHS_FAST_SYNC_PERIPHERAL_CLOCK)},
	0,
	0,
	${(CONFIG_DRV_ADCHS_CLOCK_SOURCE)},
	${(CONFIG_DRV_ADCHS_CLOCK_DIVIDER)},
	${(CONFIG_DRV_ADCHS_WARMUP_CLOCK)}
	);	
</#if>	
<#else>
<#if CONFIG_DRV_ADCHS_INTERRUPT_VECTOR_BASE?has_content>	
	PLIB_ADCHS_Setup(
	DRV_ADC_ID_1,
	${(CONFIG_DRV_ADC_VOLTAGE_REFERENCE_ADCHS)},
	${(CONFIG_DRV_ADCHS_CHARGEPUMP_MODE)},
	${(CONFIG_DRV_ADCHS_OUTPUT_DATA_FORMAT)},
	false,
	${(CONFIG_DRV_ADCHS_FAST_SYNC_SYSTEM_CLOCK)},
	${(CONFIG_DRV_ADCHS_FAST_SYNC_PERIPHERAL_CLOCK)},
	${(CONFIG_DRV_ADCHS_INTERRUPT_BIT_SHIFT_LEFT)},
	${(CONFIG_DRV_ADCHS_INTERRUPT_VECTOR_BASE)},
	${(CONFIG_DRV_ADCHS_CLOCK_SOURCE)},
	${(CONFIG_DRV_ADCHS_CLOCK_DIVIDER)},
	${(CONFIG_DRV_ADCHS_WARMUP_CLOCK)}
	);
<#else>
	PLIB_ADCHS_Setup(
	DRV_ADC_ID_1,
	${(CONFIG_DRV_ADC_VOLTAGE_REFERENCE_ADCHS)},
	${(CONFIG_DRV_ADCHS_CHARGEPUMP_MODE)},
	${(CONFIG_DRV_ADCHS_OUTPUT_DATA_FORMAT)},
	false,
	${(CONFIG_DRV_ADCHS_FAST_SYNC_SYSTEM_CLOCK)},
	${(CONFIG_DRV_ADCHS_FAST_SYNC_PERIPHERAL_CLOCK)},
	0,
	0,
	${(CONFIG_DRV_ADCHS_CLOCK_SOURCE)},
	${(CONFIG_DRV_ADCHS_CLOCK_DIVIDER)},
	${(CONFIG_DRV_ADCHS_WARMUP_CLOCK)}
	);
</#if>		
</#if>	

<#macro ADCHS_CHANNEL_FUNCTION CHANNEL_INST CHANNEL_ID DATA_RESOLUTION CLOCK_DIV SAMPLE_TIME_COUNT EARLY_INT_CLOCK
TRIGGER_SAMPLE INPUT_MODE INPUT_TRIGGER_LEVEL TRIGGER_SOURCE
ALT_INPUT_CHNL_0 ALT_INPUT_CHNL_1 ALT_INPUT_CHNL_2 ALT_INPUT_CHNL_3 ALT_INPUT_CHNL_4 ALT_INPUT_CHNL_5 ALT_INPUT_CHNL_6>
<#if EARLY_INT_CLOCK?has_content>
	PLIB_ADCHS_ChannelSetup(
	DRV_ADC_ID_1,
	${(CHANNEL_ID)},
	${(DATA_RESOLUTION)},
	${(CLOCK_DIV)},
	${(SAMPLE_TIME_COUNT)},
	${(EARLY_INT_CLOCK)}
	);
<#else>
	PLIB_ADCHS_ChannelSetup(
	DRV_ADC_ID_1,
	${(CHANNEL_ID)},
	${(DATA_RESOLUTION)},
	${(CLOCK_DIV)},
	${(SAMPLE_TIME_COUNT)},
	0
	);
</#if>

<#if TRIGGER_SAMPLE?has_content>					
	if(false == PLIB_ADCHS_ChannelTriggerSampleSelect(
					DRV_ADC_ID_1,
					${(CHANNEL_ID)},
					${(TRIGGER_SAMPLE)}
					))
					{ while(1);}
</#if>	
/* Since configuration of analog inputs (dedicated and alternate) for dedicated ADC channel */
/* is done via selection of dedicated channel only, here, the analog input for a dedicated */
/* ADC channel number is fixed */					
<#if CHANNEL_ID == "ADCHS_CHANNEL_0">

<#if ALT_INPUT_CHNL_0?has_content>
	if(false == PLIB_ADCHS_ChannelInputSelect(
					DRV_ADC_ID_1,
					${(CHANNEL_ID)},
					(ADCHS_CHANNEL_INP_SEL)${(ALT_INPUT_CHNL_0)}
					))
					{ while(1);}
</#if>

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
	PLIB_ADCHS_EarlyInterruptDisable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputEarlyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN0);
<#else>
    PLIB_ADCHS_EarlyInterruptEnable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN0);
</#if>
</#if>	

	PLIB_ADCHS_AnalogInputModeSelect(
			DRV_ADC_ID_1,
			ADCHS_AN0,
			${(INPUT_MODE)}
			);

<#if INPUT_TRIGGER_LEVEL == true>			
	PLIB_ADCHS_AnalogInputLevelTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN0 );
<#else>
	PLIB_ADCHS_AnalogInputEdgeTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN0 );
</#if>

	PLIB_ADCHS_AnalogInputTriggerSourceSelect(
			DRV_ADC_ID_1,
			ADCHS_CLASS12_AN0,
			${(TRIGGER_SOURCE)}
	);
</#if>		
<#if CHANNEL_ID == "ADCHS_CHANNEL_1">

<#if ALT_INPUT_CHNL_1?has_content>
	if(false == PLIB_ADCHS_ChannelInputSelect(
					DRV_ADC_ID_1,
					${(CHANNEL_ID)},
					(ADCHS_CHANNEL_INP_SEL)${(ALT_INPUT_CHNL_1)}
					))
					{ while(1);}
</#if>

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
	PLIB_ADCHS_EarlyInterruptDisable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputEarlyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN1);
<#else>
    PLIB_ADCHS_EarlyInterruptEnable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN1);
</#if>
</#if>

	PLIB_ADCHS_AnalogInputModeSelect(
			DRV_ADC_ID_1,
			ADCHS_AN1,
			${(INPUT_MODE)}
			);

<#if INPUT_TRIGGER_LEVEL == true>			
	PLIB_ADCHS_AnalogInputLevelTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN1 );
<#else>
	PLIB_ADCHS_AnalogInputEdgeTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN1 );
</#if>

	PLIB_ADCHS_AnalogInputTriggerSourceSelect(
			DRV_ADC_ID_1,
			ADCHS_CLASS12_AN1,
			${(TRIGGER_SOURCE)}
	);
</#if>	
<#if CHANNEL_ID == "ADCHS_CHANNEL_2">

<#if ALT_INPUT_CHNL_2?has_content>
	if(false == PLIB_ADCHS_ChannelInputSelect(
					DRV_ADC_ID_1,
					${(CHANNEL_ID)},
					(ADCHS_CHANNEL_INP_SEL)${(ALT_INPUT_CHNL_2)}
					))
					{ while(1);}
</#if>

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
	PLIB_ADCHS_EarlyInterruptDisable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputEarlyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN2);
<#else>
    PLIB_ADCHS_EarlyInterruptEnable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN2);
</#if>
</#if>

	PLIB_ADCHS_AnalogInputModeSelect(
			DRV_ADC_ID_1,
			ADCHS_AN2,
			${(INPUT_MODE)}
			);

<#if INPUT_TRIGGER_LEVEL == true>			
	PLIB_ADCHS_AnalogInputLevelTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN2 );
<#else>
	PLIB_ADCHS_AnalogInputEdgeTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN2 );
</#if>

	PLIB_ADCHS_AnalogInputTriggerSourceSelect(
			DRV_ADC_ID_1,
			ADCHS_CLASS12_AN2,
			${(TRIGGER_SOURCE)}
	);
</#if>	
<#if CHANNEL_ID == "ADCHS_CHANNEL_3">

<#if ALT_INPUT_CHNL_3?has_content>
	if(false == PLIB_ADCHS_ChannelInputSelect(
					DRV_ADC_ID_1,
					${(CHANNEL_ID)},
					(ADCHS_CHANNEL_INP_SEL)${(ALT_INPUT_CHNL_3)}
					))
					{ while(1);}
</#if>

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
	PLIB_ADCHS_EarlyInterruptDisable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputEarlyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN3);
<#else>
    PLIB_ADCHS_EarlyInterruptEnable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN3);
</#if>
</#if>

	PLIB_ADCHS_AnalogInputModeSelect(
			DRV_ADC_ID_1,
			ADCHS_AN3,
			${(INPUT_MODE)}
			);

<#if INPUT_TRIGGER_LEVEL == true>			
	PLIB_ADCHS_AnalogInputLevelTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN3 );
<#else>
	PLIB_ADCHS_AnalogInputEdgeTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN3 );
</#if>

	PLIB_ADCHS_AnalogInputTriggerSourceSelect(
			DRV_ADC_ID_1,
			ADCHS_CLASS12_AN3,
			${(TRIGGER_SOURCE)}
	);
</#if>	
<#if CHANNEL_ID == "ADCHS_CHANNEL_4">

<#if ALT_INPUT_CHNL_4?has_content>
	if(false == PLIB_ADCHS_ChannelInputSelect(
					DRV_ADC_ID_1,
					${(CHANNEL_ID)},
					(ADCHS_CHANNEL_INP_SEL)${(ALT_INPUT_CHNL_4)}
					))
					{ while(1);}
</#if>

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
	PLIB_ADCHS_EarlyInterruptDisable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputEarlyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN4);
<#else>
    PLIB_ADCHS_EarlyInterruptEnable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN4);
</#if>
</#if>

	PLIB_ADCHS_AnalogInputModeSelect(
			DRV_ADC_ID_1,
			ADCHS_AN4,
			${(INPUT_MODE)}
			);

<#if INPUT_TRIGGER_LEVEL == true>			
	PLIB_ADCHS_AnalogInputLevelTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN4 );
<#else>
	PLIB_ADCHS_AnalogInputEdgeTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN4 );
</#if>

	PLIB_ADCHS_AnalogInputTriggerSourceSelect(
			DRV_ADC_ID_1,
			ADCHS_CLASS12_AN4,
			${(TRIGGER_SOURCE)}
	);
</#if>	
<#if CHANNEL_ID == "ADCHS_CHANNEL_5">

<#if ALT_INPUT_CHNL_5?has_content>
	if(false == PLIB_ADCHS_ChannelInputSelect(
					DRV_ADC_ID_1,
					${(CHANNEL_ID)},
					(ADCHS_CHANNEL_INP_SEL)${(ALT_INPUT_CHNL_5)}
					))
					{ while(1);}
</#if>

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
	PLIB_ADCHS_EarlyInterruptDisable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputEarlyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN5);
<#else>
    PLIB_ADCHS_EarlyInterruptEnable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN5);
</#if>
</#if>

	PLIB_ADCHS_AnalogInputModeSelect(
			DRV_ADC_ID_1,
			ADCHS_AN5,
			${(INPUT_MODE)}
			);

<#if INPUT_TRIGGER_LEVEL == true>			
	PLIB_ADCHS_AnalogInputLevelTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN5 );
<#else>
	PLIB_ADCHS_AnalogInputEdgeTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN5 );
</#if>

	PLIB_ADCHS_AnalogInputTriggerSourceSelect(
			DRV_ADC_ID_1,
			ADCHS_CLASS12_AN5,
			${(TRIGGER_SOURCE)}
	);
</#if>
<#if CHANNEL_ID == "ADCHS_CHANNEL_6">

<#if ALT_INPUT_CHNL_6?has_content>
	if(false == PLIB_ADCHS_ChannelInputSelect(
					DRV_ADC_ID_1,
					${(CHANNEL_ID)},
					(ADCHS_CHANNEL_INP_SEL)${(ALT_INPUT_CHNL_6)}
					))
					{ while(1);}
</#if>

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
	PLIB_ADCHS_EarlyInterruptDisable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputEarlyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN6);
<#else>
    PLIB_ADCHS_EarlyInterruptEnable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_CLASS12_AN6);
</#if>
</#if>

	PLIB_ADCHS_AnalogInputModeSelect(
			DRV_ADC_ID_1,
			ADCHS_AN6,
			${(INPUT_MODE)}
			);

<#if INPUT_TRIGGER_LEVEL == true>			
	PLIB_ADCHS_AnalogInputLevelTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN6 );
<#else>
	PLIB_ADCHS_AnalogInputEdgeTriggerSet( DRV_ADC_ID_1, ADCHS_CLASS12_AN6 );
</#if>

	PLIB_ADCHS_AnalogInputTriggerSourceSelect(
			DRV_ADC_ID_1,
			ADCHS_CLASS12_AN6,
			${(TRIGGER_SOURCE)}
	);
</#if>
</#macro>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX0 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="0" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX0
DATA_RESOLUTION=CONFIG_DRV_ADCHS_DATA_RESOLUTION_SELECT_IDX0 CLOCK_DIV=CONFIG_DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX0
SAMPLE_TIME_COUNT=CONFIG_DRV_ADCHS_SAMPLE_TIME_COUNT_IDX0 EARLY_INT_CLOCK=CONFIG_DRV_ADCHS_EARLY_INTERRUPT_PRIOR_CLOCK_IDX0
TRIGGER_SAMPLE=CONFIG_DRV_ADCHS_TRIGGER_SAMPLE_SELECT_IDX0
INPUT_MODE=CONFIG_DRV_ADCHS_INPUT_MODE_IDX0 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_ANALOG_INPUT_LEVEL_TRIGGER_IDX0
TRIGGER_SOURCE=CONFIG_DRV_ADCHS_TRIGGER_SOURCE_IDX0
ALT_INPUT_CHNL_0=CONFIG_DRV_ADCHS_CHNL_0_ALT_INP_SEL_IDX0
ALT_INPUT_CHNL_1=CONFIG_DRV_ADCHS_CHNL_1_ALT_INP_SEL_IDX0
ALT_INPUT_CHNL_2=CONFIG_DRV_ADCHS_CHNL_2_ALT_INP_SEL_IDX0
ALT_INPUT_CHNL_3=CONFIG_DRV_ADCHS_CHNL_3_ALT_INP_SEL_IDX0
ALT_INPUT_CHNL_4=CONFIG_DRV_ADCHS_CHNL_4_ALT_INP_SEL_IDX0
ALT_INPUT_CHNL_5=CONFIG_DRV_ADCHS_CHNL_5_ALT_INP_SEL_IDX0
ALT_INPUT_CHNL_6=CONFIG_DRV_ADCHS_CHNL_6_ALT_INP_SEL_IDX0/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX1 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="1" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX1
DATA_RESOLUTION=CONFIG_DRV_ADCHS_DATA_RESOLUTION_SELECT_IDX1 CLOCK_DIV=CONFIG_DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX1
SAMPLE_TIME_COUNT=CONFIG_DRV_ADCHS_SAMPLE_TIME_COUNT_IDX1 EARLY_INT_CLOCK=CONFIG_DRV_ADCHS_EARLY_INTERRUPT_PRIOR_CLOCK_IDX1
TRIGGER_SAMPLE=CONFIG_DRV_ADCHS_TRIGGER_SAMPLE_SELECT_IDX1
INPUT_MODE=CONFIG_DRV_ADCHS_INPUT_MODE_IDX1 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_ANALOG_INPUT_LEVEL_TRIGGER_IDX1
TRIGGER_SOURCE=CONFIG_DRV_ADCHS_TRIGGER_SOURCE_IDX1
ALT_INPUT_CHNL_0=CONFIG_DRV_ADCHS_CHNL_0_ALT_INP_SEL_IDX1
ALT_INPUT_CHNL_1=CONFIG_DRV_ADCHS_CHNL_1_ALT_INP_SEL_IDX1
ALT_INPUT_CHNL_2=CONFIG_DRV_ADCHS_CHNL_2_ALT_INP_SEL_IDX1
ALT_INPUT_CHNL_3=CONFIG_DRV_ADCHS_CHNL_3_ALT_INP_SEL_IDX1
ALT_INPUT_CHNL_4=CONFIG_DRV_ADCHS_CHNL_4_ALT_INP_SEL_IDX1
ALT_INPUT_CHNL_5=CONFIG_DRV_ADCHS_CHNL_5_ALT_INP_SEL_IDX1
ALT_INPUT_CHNL_6=CONFIG_DRV_ADCHS_CHNL_6_ALT_INP_SEL_IDX1/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX2 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="2" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX2
DATA_RESOLUTION=CONFIG_DRV_ADCHS_DATA_RESOLUTION_SELECT_IDX2 CLOCK_DIV=CONFIG_DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX2
SAMPLE_TIME_COUNT=CONFIG_DRV_ADCHS_SAMPLE_TIME_COUNT_IDX2 EARLY_INT_CLOCK=CONFIG_DRV_ADCHS_EARLY_INTERRUPT_PRIOR_CLOCK_IDX2
TRIGGER_SAMPLE=CONFIG_DRV_ADCHS_TRIGGER_SAMPLE_SELECT_IDX2
INPUT_MODE=CONFIG_DRV_ADCHS_INPUT_MODE_IDX2 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_ANALOG_INPUT_LEVEL_TRIGGER_IDX2
TRIGGER_SOURCE=CONFIG_DRV_ADCHS_TRIGGER_SOURCE_IDX2
ALT_INPUT_CHNL_0=CONFIG_DRV_ADCHS_CHNL_0_ALT_INP_SEL_IDX2
ALT_INPUT_CHNL_1=CONFIG_DRV_ADCHS_CHNL_1_ALT_INP_SEL_IDX2
ALT_INPUT_CHNL_2=CONFIG_DRV_ADCHS_CHNL_2_ALT_INP_SEL_IDX2
ALT_INPUT_CHNL_3=CONFIG_DRV_ADCHS_CHNL_3_ALT_INP_SEL_IDX2
ALT_INPUT_CHNL_4=CONFIG_DRV_ADCHS_CHNL_4_ALT_INP_SEL_IDX2
ALT_INPUT_CHNL_5=CONFIG_DRV_ADCHS_CHNL_5_ALT_INP_SEL_IDX2
ALT_INPUT_CHNL_6=CONFIG_DRV_ADCHS_CHNL_6_ALT_INP_SEL_IDX2/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX3 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="3" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX3 
DATA_RESOLUTION=CONFIG_DRV_ADCHS_DATA_RESOLUTION_SELECT_IDX3 CLOCK_DIV=CONFIG_DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX3
SAMPLE_TIME_COUNT=CONFIG_DRV_ADCHS_SAMPLE_TIME_COUNT_IDX3 EARLY_INT_CLOCK=CONFIG_DRV_ADCHS_EARLY_INTERRUPT_PRIOR_CLOCK_IDX3
TRIGGER_SAMPLE=CONFIG_DRV_ADCHS_TRIGGER_SAMPLE_SELECT_IDX3
INPUT_MODE=CONFIG_DRV_ADCHS_INPUT_MODE_IDX3 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_ANALOG_INPUT_LEVEL_TRIGGER_IDX3
TRIGGER_SOURCE=CONFIG_DRV_ADCHS_TRIGGER_SOURCE_IDX3
ALT_INPUT_CHNL_0=CONFIG_DRV_ADCHS_CHNL_0_ALT_INP_SEL_IDX3
ALT_INPUT_CHNL_1=CONFIG_DRV_ADCHS_CHNL_1_ALT_INP_SEL_IDX3
ALT_INPUT_CHNL_2=CONFIG_DRV_ADCHS_CHNL_2_ALT_INP_SEL_IDX3
ALT_INPUT_CHNL_3=CONFIG_DRV_ADCHS_CHNL_3_ALT_INP_SEL_IDX3
ALT_INPUT_CHNL_4=CONFIG_DRV_ADCHS_CHNL_4_ALT_INP_SEL_IDX3
ALT_INPUT_CHNL_5=CONFIG_DRV_ADCHS_CHNL_5_ALT_INP_SEL_IDX3
ALT_INPUT_CHNL_6=CONFIG_DRV_ADCHS_CHNL_6_ALT_INP_SEL_IDX3/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX4 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="4" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX4
DATA_RESOLUTION=CONFIG_DRV_ADCHS_DATA_RESOLUTION_SELECT_IDX4 CLOCK_DIV=CONFIG_DRV_ADCHS_CHANNEL_CLOCK_DIVIDER_IDX4
SAMPLE_TIME_COUNT=CONFIG_DRV_ADCHS_SAMPLE_TIME_COUNT_IDX4 EARLY_INT_CLOCK=CONFIG_DRV_ADCHS_EARLY_INTERRUPT_PRIOR_CLOCK_IDX4
TRIGGER_SAMPLE=CONFIG_DRV_ADCHS_TRIGGER_SAMPLE_SELECT_IDX4
INPUT_MODE=CONFIG_DRV_ADCHS_INPUT_MODE_IDX4 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_ANALOG_INPUT_LEVEL_TRIGGER_IDX4
TRIGGER_SOURCE=CONFIG_DRV_ADCHS_TRIGGER_SOURCE_IDX4
ALT_INPUT_CHNL_0=CONFIG_DRV_ADCHS_CHNL_0_ALT_INP_SEL_IDX4
ALT_INPUT_CHNL_1=CONFIG_DRV_ADCHS_CHNL_1_ALT_INP_SEL_IDX4
ALT_INPUT_CHNL_2=CONFIG_DRV_ADCHS_CHNL_2_ALT_INP_SEL_IDX4
ALT_INPUT_CHNL_3=CONFIG_DRV_ADCHS_CHNL_3_ALT_INP_SEL_IDX4
ALT_INPUT_CHNL_4=CONFIG_DRV_ADCHS_CHNL_4_ALT_INP_SEL_IDX4
ALT_INPUT_CHNL_5=CONFIG_DRV_ADCHS_CHNL_5_ALT_INP_SEL_IDX4
ALT_INPUT_CHNL_6=CONFIG_DRV_ADCHS_CHNL_6_ALT_INP_SEL_IDX4/>
</#if>


<#macro ADCHS_CLASS_2_FUNCTION CLASS_2_INST INPUT_MODE INPUT_TRIGGER_LEVEL ANALOG_INPUT TRIGGER_SOURCE>

/* Setting for class-2 analog inputs */
	PLIB_ADCHS_AnalogInputModeSelect(
			DRV_ADC_ID_1,
			(ADCHS_AN_INPUT_ID)${(ANALOG_INPUT)},
			${(INPUT_MODE)}
			);

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
	PLIB_ADCHS_EarlyInterruptDisable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputEarlyInterruptEnable(DRV_ADC_ID_1, ${(ANALOG_INPUT)});
<#else>
    PLIB_ADCHS_EarlyInterruptEnable(DRV_ADC_ID_1);
    PLIB_ADCHS_AnalogInputDataReadyInterruptEnable(DRV_ADC_ID_1, ${(ANALOG_INPUT)});
</#if>
</#if>

<#if INPUT_TRIGGER_LEVEL == true>			
	PLIB_ADCHS_AnalogInputLevelTriggerSet( DRV_ADC_ID_1, (ADCHS_CLASS12_AN_INPUT_ID)${(ANALOG_INPUT)} );
<#else>
	PLIB_ADCHS_AnalogInputEdgeTriggerSet( DRV_ADC_ID_1, (ADCHS_CLASS12_AN_INPUT_ID)${(ANALOG_INPUT)} );
</#if>

	PLIB_ADCHS_AnalogInputTriggerSourceSelect(
			DRV_ADC_ID_1,
			(ADCHS_CLASS12_AN_INPUT_ID)${(ANALOG_INPUT)},
			${(TRIGGER_SOURCE)}
	);
</#macro>
<#if CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX0 == true>
<@ADCHS_CLASS_2_FUNCTION CLASS_2_INST="0"
INPUT_MODE=CONFIG_DRV_ADCHS_CLASS_2_INPUT_MODE_IDX0 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_LEVEL_TRIGGER_IDX0
ANALOG_INPUT=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX0 TRIGGER_SOURCE=CONFIG_DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX0/>
</#if>
<#if CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX1 == true>
<@ADCHS_CLASS_2_FUNCTION CLASS_2_INST="1"
INPUT_MODE=CONFIG_DRV_ADCHS_CLASS_2_INPUT_MODE_IDX1 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_LEVEL_TRIGGER_IDX1
ANALOG_INPUT=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX1 TRIGGER_SOURCE=CONFIG_DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX1/>
</#if>
<#if CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX2 == true>
<@ADCHS_CLASS_2_FUNCTION CLASS_2_INST="2"
INPUT_MODE=CONFIG_DRV_ADCHS_CLASS_2_INPUT_MODE_IDX2 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_LEVEL_TRIGGER_IDX2
ANALOG_INPUT=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX2 TRIGGER_SOURCE=CONFIG_DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX2/>
</#if>
<#if CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX3 == true>
<@ADCHS_CLASS_2_FUNCTION CLASS_2_INST="3"
INPUT_MODE=CONFIG_DRV_ADCHS_CLASS_2_INPUT_MODE_IDX3 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_LEVEL_TRIGGER_IDX3
ANALOG_INPUT=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX3 TRIGGER_SOURCE=CONFIG_DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX3/>
</#if>
<#if CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX4 == true>
<@ADCHS_CLASS_2_FUNCTION CLASS_2_INST="4"
INPUT_MODE=CONFIG_DRV_ADCHS_CLASS_2_INPUT_MODE_IDX4 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_LEVEL_TRIGGER_IDX4
ANALOG_INPUT=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX4 TRIGGER_SOURCE=CONFIG_DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX4/>
</#if>
<#if CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX5 == true>
<@ADCHS_CLASS_2_FUNCTION CLASS_2_INST="5"
INPUT_MODE=CONFIG_DRV_ADCHS_CLASS_2_INPUT_MODE_IDX5 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_LEVEL_TRIGGER_IDX5
ANALOG_INPUT=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX5 TRIGGER_SOURCE=CONFIG_DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX5/>
</#if>
<#if CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_INST_IDX6 == true>
<@ADCHS_CLASS_2_FUNCTION CLASS_2_INST="6"
INPUT_MODE=CONFIG_DRV_ADCHS_CLASS_2_INPUT_MODE_IDX6 INPUT_TRIGGER_LEVEL=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_LEVEL_TRIGGER_IDX6
ANALOG_INPUT=CONFIG_DRV_ADCHS_CLASS_2_ANALOG_INPUT_IDX6 TRIGGER_SOURCE=CONFIG_DRV_ADCHS_CLASS_2_TRIGGER_SOURCE_IDX6/>
</#if>


<#if CONFIG_USE_DRV_ADCHS_SCAN_MODE == true>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_LEVEL_TRIGGER_SENSITIVE == true>
	PLIB_ADCHS_AnalogInputScanSetup
			(
				DRV_ADC_ID_1, 
				${(CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX0)}, 
				ADCHS_SCAN_TRIGGER_SENSITIVE_LEVEL,
				${(CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_TRIGGER_SOURCE)}
			);
<#else>
	PLIB_ADCHS_AnalogInputScanSetup
			(
				DRV_ADC_ID_1, 
				${(CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX0)}, 
				ADCHS_SCAN_TRIGGER_SENSITIVE_EDGE,
				${(CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_TRIGGER_SOURCE)}
			);
</#if>			

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
	PLIB_ADCHS_EarlyInterruptDisable(DRV_ADC_ID_1);
<#else>
    PLIB_ADCHS_EarlyInterruptEnable(DRV_ADC_ID_1);
</#if>
</#if>

</#if>

<#macro SCAN_FUNCTION SCAN_INST ANALOG_INPUT_ID INPUT_MODE>
	/* Include Analog input to Scan list */
	PLIB_ADCHS_AnalogInputScanSelect
	(
		DRV_ADC_ID_1,
		${(ANALOG_INPUT_ID)}
	);
	
	PLIB_ADCHS_AnalogInputModeSelect(
			DRV_ADC_ID_1,
			${(ANALOG_INPUT_ID)},
			${(INPUT_MODE)}
			);	

<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
<#if CONFIG_DRV_ADCHS_EARLY_INTERRUPT_SELECTION == true>
    PLIB_ADCHS_AnalogInputEarlyInterruptEnable(DRV_ADC_ID_1, ${(ANALOG_INPUT_ID)});
<#else>
    PLIB_ADCHS_AnalogInputDataReadyInterruptEnable(DRV_ADC_ID_1, ${(ANALOG_INPUT_ID)});
</#if>
</#if>
			
</#macro>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX0 == true>
<@SCAN_FUNCTION SCAN_INST="0" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX0
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX0/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX1 == true>
<@SCAN_FUNCTION SCAN_INST="1" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX1
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX1/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX2 == true>
<@SCAN_FUNCTION SCAN_INST="2" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX2
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX2/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX3 == true>
<@SCAN_FUNCTION SCAN_INST="3" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX3
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX3/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX4 == true>
<@SCAN_FUNCTION SCAN_INST="4" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX4
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX4/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX5 == true>
<@SCAN_FUNCTION SCAN_INST="5" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX5
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX5/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX6 == true>
<@SCAN_FUNCTION SCAN_INST="6" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX6
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX6/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX7 == true>
<@SCAN_FUNCTION SCAN_INST="7" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX7
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX7/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX8 == true>
<@SCAN_FUNCTION SCAN_INST="8" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX8
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX8/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX9 == true>
<@SCAN_FUNCTION SCAN_INST="9" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX9
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX9/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX10 == true>
<@SCAN_FUNCTION SCAN_INST="10" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX10
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX10/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX11 == true>
<@SCAN_FUNCTION SCAN_INST="11" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX11
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX11/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX12 == true>
<@SCAN_FUNCTION SCAN_INST="12" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX12
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX12/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX13 == true>
<@SCAN_FUNCTION SCAN_INST="13" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX13
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX13/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX14 == true>
<@SCAN_FUNCTION SCAN_INST="14" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX14
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX14/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX15 == true>
<@SCAN_FUNCTION SCAN_INST="15" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX15
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX15/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX16 == true>
<@SCAN_FUNCTION SCAN_INST="16" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX16
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX16/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX17 == true>
<@SCAN_FUNCTION SCAN_INST="17" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX17
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX17/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX18 == true>
<@SCAN_FUNCTION SCAN_INST="18" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX18
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX18/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX19 == true>
<@SCAN_FUNCTION SCAN_INST="19" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX19
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX19/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX20 == true>
<@SCAN_FUNCTION SCAN_INST="20" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX20
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX20/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX21 == true>
<@SCAN_FUNCTION SCAN_INST="21" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX21
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX21/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX22 == true>
<@SCAN_FUNCTION SCAN_INST="22" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX22
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX22/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX23 == true>
<@SCAN_FUNCTION SCAN_INST="23" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX23
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX23/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX24 == true>
<@SCAN_FUNCTION SCAN_INST="24" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX24
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX24/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX25 == true>
<@SCAN_FUNCTION SCAN_INST="25" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX25
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX25/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX26 == true>
<@SCAN_FUNCTION SCAN_INST="26" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX26
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX26/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX27 == true>
<@SCAN_FUNCTION SCAN_INST="27" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX27
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX27/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX28 == true>
<@SCAN_FUNCTION SCAN_INST="28" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX28
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX28/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX29 == true>
<@SCAN_FUNCTION SCAN_INST="29" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX29
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX29/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX30 == true>
<@SCAN_FUNCTION SCAN_INST="30" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX30
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX30/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX31 == true>
<@SCAN_FUNCTION SCAN_INST="31" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX31
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX31/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX32 == true>
<@SCAN_FUNCTION SCAN_INST="32" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX32
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX32/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX33 == true>
<@SCAN_FUNCTION SCAN_INST="33" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX33
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX33/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX34 == true>
<@SCAN_FUNCTION SCAN_INST="34" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX34
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX34/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX35 == true>
<@SCAN_FUNCTION SCAN_INST="35" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX35
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX35/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX36 == true>
<@SCAN_FUNCTION SCAN_INST="36" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX36
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX36/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX37 == true>
<@SCAN_FUNCTION SCAN_INST="37" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX37
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX37/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX38 == true>
<@SCAN_FUNCTION SCAN_INST="38" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX38
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX38/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX39 == true>
<@SCAN_FUNCTION SCAN_INST="39" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX39
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX39/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX40 == true>
<@SCAN_FUNCTION SCAN_INST="40" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX40
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX40/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX41 == true>
<@SCAN_FUNCTION SCAN_INST="41" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX41
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX41/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX42 == true>
<@SCAN_FUNCTION SCAN_INST="42" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX42
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX42/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX43 == true>
<@SCAN_FUNCTION SCAN_INST="43" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX43
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX43/>
</#if>
<#if CONFIG_DRV_ADCHS_ANALOG_INPUT_SCAN_INST_IDX44 == true>
<@SCAN_FUNCTION SCAN_INST="44" ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_ANALOG_INPUT_ID_IDX44
INPUT_MODE=CONFIG_DRV_ADCHS_SCAN_ANALOG_INPUT_MODE_IDX44/>
</#if>

<#macro DIGITAL_COMP_FUNCTIONS DIG_COMP_INST DIG_COMP_ID DIG_COMP_ANALOG_INPUT_ID HI_LIM LO_LIM
EVENT_BTWN EVENT_HI_HI EVENT_HI_LO EVENT_LO_HI EVENT_LO_LO>
	/* Digital comparator setup */
    PLIB_ADCHS_DigitalComparatorSetup
		( 
			DRV_ADC_ID_1,
			${(DIG_COMP_ID)},
			false,
<#if EVENT_BTWN == true>			
            true,
<#else>
			false,
</#if>
<#if EVENT_HI_HI == true>			
            true,
<#else>
			false,
</#if>
<#if EVENT_HI_LO == true>			
            true,
<#else>
			false,
</#if>
<#if EVENT_LO_HI == true>			
            true,
<#else>
			false,
</#if>
<#if EVENT_LO_LO == true>			
            true,
<#else>
			false,
</#if>
            ${(DIG_COMP_ANALOG_INPUT_ID)},
            ${(HI_LIM)},
            ${(LO_LIM)}
		);

</#macro>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX0 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="0" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX0
DIG_COMP_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ANALOG_INPUT_ID_IDX0 HI_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HIGH_LIMIT_IDX0
LO_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LOW_LIMIT_IDX0 EVENT_BTWN=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_BTWN_EVENT_IDX0
EVENT_HI_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_HI_EVENT_IDX0 EVENT_HI_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_LO_EVENT_IDX0
EVENT_LO_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_HI_EVENT_IDX0 EVENT_LO_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_LO_EVENT_IDX0/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX1 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="1" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX1
DIG_COMP_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ANALOG_INPUT_ID_IDX1 HI_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HIGH_LIMIT_IDX1
LO_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LOW_LIMIT_IDX1 EVENT_BTWN=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_BTWN_EVENT_IDX1
EVENT_HI_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_HI_EVENT_IDX1 EVENT_HI_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_LO_EVENT_IDX1
EVENT_LO_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_HI_EVENT_IDX1 EVENT_LO_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_LO_EVENT_IDX1/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX2 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="2" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX2
DIG_COMP_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ANALOG_INPUT_ID_IDX2 HI_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HIGH_LIMIT_IDX2
LO_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LOW_LIMIT_IDX2 EVENT_BTWN=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_BTWN_EVENT_IDX2
EVENT_HI_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_HI_EVENT_IDX2 EVENT_HI_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_LO_EVENT_IDX2
EVENT_LO_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_HI_EVENT_IDX2 EVENT_LO_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_LO_EVENT_IDX2/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX3 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="3" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX3
DIG_COMP_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ANALOG_INPUT_ID_IDX3 HI_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HIGH_LIMIT_IDX3
LO_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LOW_LIMIT_IDX3 EVENT_BTWN=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_BTWN_EVENT_IDX3
EVENT_HI_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_HI_EVENT_IDX3 EVENT_HI_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_LO_EVENT_IDX3
EVENT_LO_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_HI_EVENT_IDX3 EVENT_LO_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_LO_EVENT_IDX3/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX4 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="4" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX4
DIG_COMP_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ANALOG_INPUT_ID_IDX4 HI_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HIGH_LIMIT_IDX4
LO_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LOW_LIMIT_IDX4 EVENT_BTWN=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_BTWN_EVENT_IDX4
EVENT_HI_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_HI_EVENT_IDX4 EVENT_HI_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_LO_EVENT_IDX4
EVENT_LO_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_HI_EVENT_IDX4 EVENT_LO_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_LO_EVENT_IDX4/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX5 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="5" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX5
DIG_COMP_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ANALOG_INPUT_ID_IDX5 HI_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HIGH_LIMIT_IDX5
LO_LIM=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LOW_LIMIT_IDX5 EVENT_BTWN=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_BTWN_EVENT_IDX5
EVENT_HI_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_HI_EVENT_IDX5 EVENT_HI_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_HI_LO_EVENT_IDX5
EVENT_LO_HI=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_HI_EVENT_IDX5 EVENT_LO_LO=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_LO_LO_EVENT_IDX5/>
</#if>

<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DC1">
		    PLIB_ADCHS_DigitalComparatorInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_COMPARATOR_1);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DC2">
		    PLIB_ADCHS_DigitalComparatorInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_COMPARATOR_2);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DC3">
		    PLIB_ADCHS_DigitalComparatorInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_COMPARATOR_3);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DC4">
		    PLIB_ADCHS_DigitalComparatorInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_COMPARATOR_4);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DC5">
		    PLIB_ADCHS_DigitalComparatorInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_COMPARATOR_5);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DC6">
		    PLIB_ADCHS_DigitalComparatorInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_COMPARATOR_6);
</#if>

<#macro DIGITAL_FILT_FUNCTIONS DIG_FILT_INST DIG_FILT_ID DIG_FILT_ANALOG_INPUT_ID SIG_BIT OVERSAMP_RATIO AVG_COUNT>
	/* Digital filter initialization */
<#if OVERSAMP_RATIO?has_content>
    PLIB_ADCHS_DigitalFilterOversamplingModeSetup
		( 
			DRV_ADC_ID_1,
		    ${(DIG_FILT_ID)},
		    ${(DIG_FILT_ANALOG_INPUT_ID)},
		    ${(SIG_BIT)},
			${(OVERSAMP_RATIO)},
			false
		);
</#if>
<#if AVG_COUNT?has_content>
    PLIB_ADCHS_DigitalFilterAveragingModeSetup
		( 
			DRV_ADC_ID_1,
		    ${(DIG_FILT_ID)},
		    ${(DIG_FILT_ANALOG_INPUT_ID)},
		    ${(SIG_BIT)},
			${(AVG_COUNT)},
			false
		);
</#if>

</#macro>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX0 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="0" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX0
DIG_FILT_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ANALOG_INPUT_ID_IDX0 SIG_BIT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_SIG_BITS_IDX0
OVERSAMP_RATIO=CONFIG_DRV_ADCHS_DIGITAL_FILTER_OVERSAMPLING_RATIO_IDX0 AVG_COUNT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_AVERAGING_COUNT_IDX0/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX1 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="1" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX1
DIG_FILT_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ANALOG_INPUT_ID_IDX1 SIG_BIT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_SIG_BITS_IDX1
OVERSAMP_RATIO=CONFIG_DRV_ADCHS_DIGITAL_FILTER_OVERSAMPLING_RATIO_IDX1 AVG_COUNT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_AVERAGING_COUNT_IDX1/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX2 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="2" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX2
DIG_FILT_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ANALOG_INPUT_ID_IDX2 SIG_BIT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_SIG_BITS_IDX2
OVERSAMP_RATIO=CONFIG_DRV_ADCHS_DIGITAL_FILTER_OVERSAMPLING_RATIO_IDX2 AVG_COUNT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_AVERAGING_COUNT_IDX2/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX3 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="3" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX3
DIG_FILT_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ANALOG_INPUT_ID_IDX3 SIG_BIT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_SIG_BITS_IDX3
OVERSAMP_RATIO=CONFIG_DRV_ADCHS_DIGITAL_FILTER_OVERSAMPLING_RATIO_IDX3 AVG_COUNT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_AVERAGING_COUNT_IDX3/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX4 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="4" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX4
DIG_FILT_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ANALOG_INPUT_ID_IDX4 SIG_BIT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_SIG_BITS_IDX4
OVERSAMP_RATIO=CONFIG_DRV_ADCHS_DIGITAL_FILTER_OVERSAMPLING_RATIO_IDX4 AVG_COUNT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_AVERAGING_COUNT_IDX4/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX5 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="5" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX5
DIG_FILT_ANALOG_INPUT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ANALOG_INPUT_ID_IDX5 SIG_BIT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_SIG_BITS_IDX5
OVERSAMP_RATIO=CONFIG_DRV_ADCHS_DIGITAL_FILTER_OVERSAMPLING_RATIO_IDX5 AVG_COUNT=CONFIG_DRV_ADCHS_DIGITAL_FILTER_AVERAGING_COUNT_IDX5/>
</#if>

<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DF1">
		    PLIB_ADCHS_DigitalFilterDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_FILTER_1);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DF2">
		    PLIB_ADCHS_DigitalFilterDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_FILTER_2);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DF3">
		    PLIB_ADCHS_DigitalFilterDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_FILTER_3);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DF4">
		    PLIB_ADCHS_DigitalFilterDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_FILTER_4);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DF5">
		    PLIB_ADCHS_DigitalFilterDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_FILTER_5);
</#if>
<#if CONFIG_DRV_ADCHS_INTERRUPT_SOURCE == "INT_SOURCE_ADC_1_DF6">
		    PLIB_ADCHS_DigitalFilterDataReadyInterruptEnable(DRV_ADC_ID_1, ADCHS_DIGITAL_FILTER_6);
</#if>

<#if CONFIG_USE_DRV_ADCHS_CVD == true>
    /* Select CVD mode */
PLIB_ADCHS_CVDSetup
( 
	DRV_ADC_ID_1,
	${(CONFIG_DRV_ADCHS_CVD_CAPACITOR)},
<#if CONFIG_DRV_ADCHS_CVD_DIGITAL_COMPARATOR_BTWN_EVENT == true>			
            true,
<#else>
			false,
</#if>
<#if CONFIG_DRV_ADCHS_CVD_DIGITAL_COMPARATOR_HI_HI_EVENT == true>			
            true,
<#else>
			false,
</#if>
<#if CONFIG_DRV_ADCHS_CVD_DIGITAL_COMPARATOR_HI_LO_EVENT == true>			
            true,
<#else>
			false,
</#if>
<#if CONFIG_DRV_ADCHS_CVD_DIGITAL_COMPARATOR_LO_HI_EVENT == true>			
            true,
<#else>
			false,
</#if>
<#if CONFIG_DRV_ADCHS_CVD_DIGITAL_COMPARATOR_LO_LO_EVENT == true>			
            true,
<#else>
			false,
</#if>
            ${(CONFIG_DRV_ADCHS_CVD_DIGITAL_COMPARATOR_ANALOG_INPUT_ID)},
            ${(CONFIG_DRV_ADCHS_CVD_DIGITAL_COMPARATOR_HIGH_LIMIT)},
            ${(CONFIG_DRV_ADCHS_CVD_DIGITAL_COMPARATOR_LOW_LIMIT)}
);

/* Enable comparator-1 as it is used by CVD */
PLIB_ADCHS_DigitalComparatorEnable
(
	DRV_ADC_ID_1,
	ADCHS_DIGITAL_COMPARATOR_1
);

</#if>

    /* Enable ADC */
    PLIB_ADCHS_Enable(DRV_ADC_ID_1);
	
	/* Check Vref to be ready */
	while(!PLIB_ADCHS_VREFIsReady(DRV_ADC_ID_1));
	
	/* Check for Vref Fault */
	while(PLIB_ADCHS_VREFFaultHasOccurred(DRV_ADC_ID_1));	

	
	
	
<#macro ADCHS_CHANNEL_FUNCTION CHANNEL_INST CHANNEL_ID>
	/* Enable analog feature for the specified channel */
	PLIB_ADCHS_ChannelAnalogFeatureEnable
	(
		DRV_ADC_ID_1,
		${(CHANNEL_ID)}
	);
	
	/* Wait for the modules to be ready */
	while(!PLIB_ADCHS_ChannelIsReady
		(	
			DRV_ADC_ID_1,
			${(CHANNEL_ID)}
		)
	);
</#macro>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX0 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="0" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX0/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX1 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="1" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX1/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX2 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="2" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX2/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX3 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="3" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX3/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX4 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="4" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX4/>
</#if>	
	
<#if CONFIG_DRV_ADCHS_INTERRUPT_MODE == true>
    /* Initialize ADC Interrupt */
    PLIB_INT_SourceFlagClear(INT_ID_0, ${CONFIG_DRV_ADCHS_INTERRUPT_SOURCE});
    PLIB_INT_SourceEnable(INT_ID_0, ${CONFIG_DRV_ADCHS_INTERRUPT_SOURCE});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${CONFIG_DRV_ADCHS_INTERRUPT_VECTOR}, ${CONFIG_DRV_ADCHS_INTERRUPT_PRIORITY});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${CONFIG_DRV_ADCHS_INTERRUPT_VECTOR}, ${CONFIG_DRV_ADCHS_INTERRUPT_SUB_PRIORITY});	
</#if>	
}


inline void DRV_ADC_DeInitialize(void)
{
    /* Enable ADC */
    PLIB_ADCHS_Disable(DRV_ADC_ID_1);
}


<#macro ADCHS_CHANNEL_FUNCTION CHANNEL_INST CHANNEL_ID>
inline void DRV_ADC${CHANNEL_INST}_Open(void)
{
	/* Enable digital feature for the specified channel */
	PLIB_ADCHS_ChannelDigitalFeatureEnable
	(
		DRV_ADC_ID_1,
		${(CHANNEL_ID)}
	);
}

inline void DRV_ADC${CHANNEL_INST}_Close(void)
{
	/* Disable digital feature for the specified channel */
	PLIB_ADCHS_ChannelDigitalFeatureDisable
	(
		DRV_ADC_ID_1,
		${(CHANNEL_ID)}
	);
}
</#macro>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX0 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="0" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX0/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX1 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="1" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX1/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX2 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="2" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX2/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX3 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="3" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX3/>
</#if>
<#if CONFIG_DRV_ADCHS_CHANNEL_INST_IDX4 == true>
<@ADCHS_CHANNEL_FUNCTION CHANNEL_INST="4" CHANNEL_ID=CONFIG_DRV_ADCHS_CHANNEL_ID_IDX4/>
</#if>


inline void DRV_ADC_Start(void)
{
    /* Start ADC */
    //PLIB_ADCHS_SoftwareSamplingStart(DRV_ADC_ID_1);
	PLIB_ADCHS_GlobalSoftwareTriggerEnable(DRV_ADC_ID_1);
}

inline void DRV_ADC_Stop(void)
{
    /* Stop ADC */
    PLIB_ADCHS_SoftwareSamplingStop(DRV_ADC_ID_1);	
}

inline void DRV_ADC_NegativeInputSelect(ADCHS_SCAN_TRIGGER_SOURCE mux, ADCHS_INPUT_MODE input)
{

}

inline void DRV_ADC_PositiveInputSelect(ADCHS_SCAN_TRIGGER_SOURCE mux, ADCHS_INPUT_MODE input)
{

}

inline void DRV_ADC_ChannelScanInputsAdd(ADCHS_AN_INPUT_ID scanInput)
{

}

inline void DRV_ADC_ChannelScanInputsRemove(ADCHS_AN_INPUT_ID scanInput)
{

}

<#if CONFIG_HAVE_ADC_ESCAN == true>

inline void DRV_ADC_ChannelExtendedScanInputsAdd(ADCHS_AN_INPUT_ID eScanInput)
{
    /* Add Scan Input */
    PLIB_ADC_InputScanMaskAddExtended(DRV_ADC_ID_1, eScanInput);
}

inline void DRV_ADC_ChannelExtendedScanInputsRemove(ADCHS_AN_INPUT_ID eScanInput)
{
    /* Remove Scan Input */
    PLIB_ADC_InputScanMaskRemoveExtended(DRV_ADC_ID_1, eScanInput);
}
</#if>
uint32_t DRV_ADC_SamplesRead(uint8_t bufIndex)
{
    /* Read Result */
    return PLIB_ADCHS_AnalogInputResultGet
	( 
		DRV_ADC_ID_1, 
		(ADCHS_AN0 + bufIndex)
	);
}

bool DRV_ADC_SamplesAvailable(uint8_t bufIndex)
{
    /* Check if data is available or not */
	return PLIB_ADCHS_AnalogInputDataIsReady
	(
		DRV_ADC_ID_1, 
		(ADCHS_AN0 + bufIndex)
	);
}

<#macro DIGITAL_COMP_FUNCTIONS DIG_COMP_INST DIG_COMP_ID>

inline void DRV_ADC_DigitalComparator${DIG_COMP_INST}_Open(void)
{
	/* Enable digital comparator */
	PLIB_ADCHS_DigitalComparatorEnable
	(
		DRV_ADC_ID_1,
		${(DIG_COMP_ID)}
	);
}

inline void DRV_ADC_DigitalComparator${DIG_COMP_INST}_Close(void)
{
	/* Disable digital comparator */
	PLIB_ADCHS_DigitalComparatorDisable
	(
		DRV_ADC_ID_1,
		${(DIG_COMP_ID)}
	);
}

inline bool DRV_ADC_DigitalComparator${DIG_COMP_INST}_EventHasOccurred(void)
{

	return(PLIB_ADCHS_DigitalComparatorEventHasOccurred
	(
		DRV_ADC_ID_1,
		${(DIG_COMP_ID)}
	));
}

</#macro>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX0 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="0" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX0/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX1 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="1" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX1/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX2 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="2" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX2/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX3 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="3" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX3/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX4 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="4" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX4/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_INST_IDX5 == true>
<@DIGITAL_COMP_FUNCTIONS DIG_COMP_INST="5" DIG_COMP_ID=CONFIG_DRV_ADCHS_DIGITAL_COMPARATOR_ID_IDX5/>
</#if>


<#macro DIGITAL_FILT_FUNCTIONS DIG_FILT_INST DIG_FILT_ID>

inline void DRV_ADC_DigitalFilter${DIG_FILT_INST}_Open(void)
{
	/* Enable digital comparator */
	PLIB_ADCHS_DigitalFilterEnable
	(
		DRV_ADC_ID_1,
		${(DIG_FILT_ID)}
	);
}

inline void DRV_ADC_DigitalFilter${DIG_FILT_INST}_Close(void)
{
	/* Disable digital comparator */
	PLIB_ADCHS_DigitalFilterDisable
	(
		DRV_ADC_ID_1,
		${(DIG_FILT_ID)}
	);
}

inline bool DRV_ADC_DigitalFilter${DIG_FILT_INST}_DataIsReady(void)
{

	return(PLIB_ADCHS_DigitalFilterDataIsReady
	(
		DRV_ADC_ID_1,
		${(DIG_FILT_ID)}
	));
}

inline int16_t DRV_ADC_DigitalFilter${DIG_FILT_INST}_DataRead(void)
{

	return(PLIB_ADCHS_DigitalFilterDataGet
	(
		DRV_ADC_ID_1,
		${(DIG_FILT_ID)}
	));
}


</#macro>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX0 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="0" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX0/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX1 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="1" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX1/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX2 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="2" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX2/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX3 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="3" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX3/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX4 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="4" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX4/>
</#if>
<#if CONFIG_DRV_ADCHS_DIGITAL_FILTER_INST_IDX5 == true>
<@DIGITAL_FILT_FUNCTIONS DIG_FILT_INST="5" DIG_FILT_ID=CONFIG_DRV_ADCHS_DIGITAL_FILTER_ID_IDX5/>
</#if>

<#if CONFIG_USE_DRV_ADCHS_CVD == true>
inline void DRV_ADC_CVD_Start(void)
{
	/* Enable CVD mode */
	PLIB_ADCHS_CVDEnable
	(
		DRV_ADC_ID_1
	);
}

inline void DRV_ADC_CVD_Stop(void)
{
	/* Disable CVD mode */
	PLIB_ADCHS_CVDDisable
	(
		DRV_ADC_ID_1
	);
}

inline uint16_t DRV_ADC_CVD_ResultRead(void)
{
    /* Read Result */
    return PLIB_ADCHS_CVDResultGet
	( 
		DRV_ADC_ID_1
	);
}

inline bool DRV_ADC_DigitalComparator_EventHasOccurred(void)
{

	return(PLIB_ADCHS_DigitalComparatorEventHasOccurred
	(
		DRV_ADC_ID_1,
		ADCHS_DIGITAL_COMPARATOR_1
	));
}

ADCHS_AN_INPUT_ID DRV_ADC_DigitalComparator_AnalogInputGet(void)
{
	return(PLIB_ADCHS_DigitalComparatorAnalogInputGet
	( 
		DRV_ADC_ID_1,
		ADCHS_DIGITAL_COMPARATOR_1
	));
}

</#if>

</#if>
</#if>
<#--
/*******************************************************************************
 End of File
*/
-->
