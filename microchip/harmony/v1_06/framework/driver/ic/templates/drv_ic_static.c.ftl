/*******************************************************************************
  IC Driver Functions for Static Single Instance Driver

  Company:
    Microchip Technology Inc.

  File Name:
    drv_ic_static.c

  Summary:
    IC driver implementation for the static single instance driver.

  Description:
    The IC device driver provides a simple interface to manage the IC
    modules on Microchip microcontrollers.
    
  Remarks:
    Static interfaces incorporate the driver instance number within the names
    of the routines, eliminating the need for an object ID or object handle.
    Static single-open interfaces also eliminate the need for the open handle.
*******************************************************************************/

//DOM-IGNORE-BEGIN
/*******************************************************************************
Copyright (c) 2013 released Microchip Technology Inc.  All rights reserved.

Microchip licenses to you the right to use, modify, copy and distribute
Software only when embedded on a Microchip microcontroller or digital signal
controller that is integrated into your product or third party product
(pursuant to the sublicense terms in the accompanying license agreement).

You should refer to the license agreement accompanying this Software for
additional information regarding your rights and obligations.

SOFTWARE AND DOCUMENTATION ARE PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF
MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER
CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR
OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR
CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF
SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
(INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
*******************************************************************************/
//DOM-IGNORE-END

// *****************************************************************************
// *****************************************************************************
// Header Includes
// *****************************************************************************
// *****************************************************************************
#include "peripheral/ic/plib_ic.h"
<#if CONFIG_DRV_IC_INTERRUPT_MODE == true>
#include "peripheral/int/plib_int.h"
</#if>
<#macro DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE IC_INSTANCE IC_MODES IC_EDGE_TYPES
IC_TIMERS IC_BUF_SIZE IC_EVE_INT IC_INT_SRC IC_INT_VEC IC_INT_PRI IC_INT_SPRI
IC_EINT_SRC IC_EINT_VEC IC_EINT_PRI IC_EINT_SPRI>
// *****************************************************************************
// *****************************************************************************
// Section: Instance ${DRV_INSTANCE} static driver functions
// *****************************************************************************
// *****************************************************************************
void DRV_IC${DRV_INSTANCE}_Initialize(void)
{	
    PLIB_IC_ModeSelect(${IC_INSTANCE}, ${IC_MODES});
    PLIB_IC_FirstCaptureEdgeSelect(${IC_INSTANCE}, ${IC_EDGE_TYPES});
    PLIB_IC_TimerSelect(${IC_INSTANCE}, ${IC_TIMERS});
    PLIB_IC_BufferSizeSelect(${IC_INSTANCE}, ${IC_BUF_SIZE});
    PLIB_IC_EventsPerInterruptSelect(${IC_INSTANCE}, ${IC_EVE_INT});   
<#if CONFIG_DRV_IC_INTERRUPT_MODE == true>    

    /* Setup Interrupt */   
    PLIB_INT_SourceEnable(INT_ID_0, ${IC_INT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${IC_INT_VEC}, ${IC_INT_PRI});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${IC_INT_VEC}, ${IC_INT_SPRI});          
<#if CONFIG_PIC32MZ == true>    

    /* Setup Error Interrupt */   
    PLIB_INT_SourceEnable(INT_ID_0, ${IC_EINT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${IC_EINT_VEC}, ${IC_EINT_PRI});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${IC_EINT_VEC}, ${IC_EINT_SPRI});      
</#if>
</#if>
}

void DRV_IC${DRV_INSTANCE}_Start(void)
{
   PLIB_IC_Enable(${IC_INSTANCE});
}

void DRV_IC${DRV_INSTANCE}_Stop(void)
{
   PLIB_IC_Disable(${IC_INSTANCE});
}

uint32_t DRV_IC${DRV_INSTANCE}_Capture32BitDataRead(void)
{
   return PLIB_IC_Buffer32BitGet(${IC_INSTANCE});
}

uint16_t DRV_IC${DRV_INSTANCE}_Capture16BitDataRead(void)
{
   return PLIB_IC_Buffer16BitGet(${IC_INSTANCE});
}

bool DRV_IC${DRV_INSTANCE}_BufferIsEmpty(void)
{
   return PLIB_IC_BufferIsEmpty(${IC_INSTANCE});
}

</#macro>

<#if CONFIG_DRV_IC_INST_IDX0 == true>
<@DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE="0" IC_INSTANCE=CONFIG_DRV_IC_PERIPHERAL_ID_IDX0 
IC_MODES=CONFIG_DRV_IC_INPUT_CAPTURE_MODES_IDX0 IC_EDGE_TYPES=CONFIG_DRV_IC_EDGE_TYPES_IDX0
IC_TIMERS=CONFIG_DRV_IC_TIMERS_IDX0 IC_BUF_SIZE=CONFIG_DRV_IC_BUFFER_SIZE_IDX0 
IC_EVE_INT=CONFIG_DRV_IC_EVENTS_PER_INTERRUPT_IDX0 IC_INT_SRC=CONFIG_DRV_IC_INTERRUPT_SOURCE_IDX0
IC_INT_VEC=CONFIG_DRV_IC_INTERRUPT_VECTOR_IDX0 IC_INT_PRI=CONFIG_DRV_IC_INT_PRIORITY_IDX0
IC_INT_SPRI=CONFIG_DRV_IC_INT_SUB_PRIORITY_IDX0 IC_EINT_SRC=CONFIG_DRV_IC_ERR_INTERRUPT_SOURCE_IDX0
IC_EINT_VEC=CONFIG_DRV_IC_ERR_INTERRUPT_VECTOR_IDX0 IC_EINT_PRI=CONFIG_DRV_IC_ERR_INT_PRIORITY_IDX0
IC_EINT_SPRI=CONFIG_DRV_IC_ERR_INT_SUB_PRIORITY_IDX0/>
</#if>
<#if CONFIG_DRV_IC_INST_IDX1 == true>
<@DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE="1" IC_INSTANCE=CONFIG_DRV_IC_PERIPHERAL_ID_IDX1 
IC_MODES=CONFIG_DRV_IC_INPUT_CAPTURE_MODES_IDX1 IC_EDGE_TYPES=CONFIG_DRV_IC_EDGE_TYPES_IDX1
IC_TIMERS=CONFIG_DRV_IC_TIMERS_IDX1 IC_BUF_SIZE=CONFIG_DRV_IC_BUFFER_SIZE_IDX1 
IC_EVE_INT=CONFIG_DRV_IC_EVENTS_PER_INTERRUPT_IDX1 IC_INT_SRC=CONFIG_DRV_IC_INTERRUPT_SOURCE_IDX1
IC_INT_VEC=CONFIG_DRV_IC_INTERRUPT_VECTOR_IDX1 IC_INT_PRI=CONFIG_DRV_IC_INT_PRIORITY_IDX1
IC_INT_SPRI=CONFIG_DRV_IC_INT_SUB_PRIORITY_IDX1 IC_EINT_SRC=CONFIG_DRV_IC_ERR_INTERRUPT_SOURCE_IDX1
IC_EINT_VEC=CONFIG_DRV_IC_ERR_INTERRUPT_VECTOR_IDX1 IC_EINT_PRI=CONFIG_DRV_IC_ERR_INT_PRIORITY_IDX1
IC_EINT_SPRI=CONFIG_DRV_IC_ERR_INT_SUB_PRIORITY_IDX1/>
</#if>
<#if CONFIG_DRV_IC_INST_IDX2 == true>
<@DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE="2" IC_INSTANCE=CONFIG_DRV_IC_PERIPHERAL_ID_IDX2 
IC_MODES=CONFIG_DRV_IC_INPUT_CAPTURE_MODES_IDX2 IC_EDGE_TYPES=CONFIG_DRV_IC_EDGE_TYPES_IDX2
IC_TIMERS=CONFIG_DRV_IC_TIMERS_IDX2 IC_BUF_SIZE=CONFIG_DRV_IC_BUFFER_SIZE_IDX2 
IC_EVE_INT=CONFIG_DRV_IC_EVENTS_PER_INTERRUPT_IDX2 IC_INT_SRC=CONFIG_DRV_IC_INTERRUPT_SOURCE_IDX2
IC_INT_VEC=CONFIG_DRV_IC_INTERRUPT_VECTOR_IDX2 IC_INT_PRI=CONFIG_DRV_IC_INT_PRIORITY_IDX2
IC_INT_SPRI=CONFIG_DRV_IC_INT_SUB_PRIORITY_IDX2 IC_EINT_SRC=CONFIG_DRV_IC_ERR_INTERRUPT_SOURCE_IDX2
IC_EINT_VEC=CONFIG_DRV_IC_ERR_INTERRUPT_VECTOR_IDX2 IC_EINT_PRI=CONFIG_DRV_IC_ERR_INT_PRIORITY_IDX2
IC_EINT_SPRI=CONFIG_DRV_IC_ERR_INT_SUB_PRIORITY_IDX2/>
</#if>
<#if CONFIG_DRV_IC_INST_IDX3 == true>
<@DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE="3" IC_INSTANCE=CONFIG_DRV_IC_PERIPHERAL_ID_IDX3 
IC_MODES=CONFIG_DRV_IC_INPUT_CAPTURE_MODES_IDX3 IC_EDGE_TYPES=CONFIG_DRV_IC_EDGE_TYPES_IDX3
IC_TIMERS=CONFIG_DRV_IC_TIMERS_IDX3 IC_BUF_SIZE=CONFIG_DRV_IC_BUFFER_SIZE_IDX3 
IC_EVE_INT=CONFIG_DRV_IC_EVENTS_PER_INTERRUPT_IDX3 IC_INT_SRC=CONFIG_DRV_IC_INTERRUPT_SOURCE_IDX3
IC_INT_VEC=CONFIG_DRV_IC_INTERRUPT_VECTOR_IDX3 IC_INT_PRI=CONFIG_DRV_IC_INT_PRIORITY_IDX3
IC_INT_SPRI=CONFIG_DRV_IC_INT_SUB_PRIORITY_IDX3 IC_EINT_SRC=CONFIG_DRV_IC_ERR_INTERRUPT_SOURCE_IDX3
IC_EINT_VEC=CONFIG_DRV_IC_ERR_INTERRUPT_VECTOR_IDX3 IC_EINT_PRI=CONFIG_DRV_IC_ERR_INT_PRIORITY_IDX3
IC_EINT_SPRI=CONFIG_DRV_IC_ERR_INT_SUB_PRIORITY_IDX3/>
</#if>
<#if CONFIG_DRV_IC_INST_IDX4 == true>
<@DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE="4" IC_INSTANCE=CONFIG_DRV_IC_PERIPHERAL_ID_IDX4 
IC_MODES=CONFIG_DRV_IC_INPUT_CAPTURE_MODES_IDX4 IC_EDGE_TYPES=CONFIG_DRV_IC_EDGE_TYPES_IDX4
IC_TIMERS=CONFIG_DRV_IC_TIMERS_IDX4 IC_BUF_SIZE=CONFIG_DRV_IC_BUFFER_SIZE_IDX4 
IC_EVE_INT=CONFIG_DRV_IC_EVENTS_PER_INTERRUPT_IDX4 IC_INT_SRC=CONFIG_DRV_IC_INTERRUPT_SOURCE_IDX4
IC_INT_VEC=CONFIG_DRV_IC_INTERRUPT_VECTOR_IDX4 IC_INT_PRI=CONFIG_DRV_IC_INT_PRIORITY_IDX4
IC_INT_SPRI=CONFIG_DRV_IC_INT_SUB_PRIORITY_IDX4 IC_EINT_SRC=CONFIG_DRV_IC_ERR_INTERRUPT_SOURCE_IDX4
IC_EINT_VEC=CONFIG_DRV_IC_ERR_INTERRUPT_VECTOR_IDX4 IC_EINT_PRI=CONFIG_DRV_IC_ERR_INT_PRIORITY_IDX4
IC_EINT_SPRI=CONFIG_DRV_IC_ERR_INT_SUB_PRIORITY_IDX4/>
</#if>
<#if CONFIG_DRV_IC_INST_IDX5 == true>
<@DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE="5" IC_INSTANCE=CONFIG_DRV_IC_PERIPHERAL_ID_IDX5 
IC_MODES=CONFIG_DRV_IC_INPUT_CAPTURE_MODES_IDX5 IC_EDGE_TYPES=CONFIG_DRV_IC_EDGE_TYPES_IDX5
IC_TIMERS=CONFIG_DRV_IC_TIMERS_IDX5 IC_BUF_SIZE=CONFIG_DRV_IC_BUFFER_SIZE_IDX5 
IC_EVE_INT=CONFIG_DRV_IC_EVENTS_PER_INTERRUPT_IDX5 IC_INT_SRC=CONFIG_DRV_IC_INTERRUPT_SOURCE_IDX5
IC_INT_VEC=CONFIG_DRV_IC_INTERRUPT_VECTOR_IDX5 IC_INT_PRI=CONFIG_DRV_IC_INT_PRIORITY_IDX5
IC_INT_SPRI=CONFIG_DRV_IC_INT_SUB_PRIORITY_IDX5 IC_EINT_SRC=CONFIG_DRV_IC_ERR_INTERRUPT_SOURCE_IDX5
IC_EINT_VEC=CONFIG_DRV_IC_ERR_INTERRUPT_VECTOR_IDX5 IC_EINT_PRI=CONFIG_DRV_IC_ERR_INT_PRIORITY_IDX5
IC_EINT_SPRI=CONFIG_DRV_IC_ERR_INT_SUB_PRIORITY_IDX5/>
</#if>
<#if CONFIG_DRV_IC_INST_IDX6 == true>
<@DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE="6" IC_INSTANCE=CONFIG_DRV_IC_PERIPHERAL_ID_IDX6 
IC_MODES=CONFIG_DRV_IC_INPUT_CAPTURE_MODES_IDX6 IC_EDGE_TYPES=CONFIG_DRV_IC_EDGE_TYPES_IDX6
IC_TIMERS=CONFIG_DRV_IC_TIMERS_IDX6 IC_BUF_SIZE=CONFIG_DRV_IC_BUFFER_SIZE_IDX6 
IC_EVE_INT=CONFIG_DRV_IC_EVENTS_PER_INTERRUPT_IDX6 IC_INT_SRC=CONFIG_DRV_IC_INTERRUPT_SOURCE_IDX6
IC_INT_VEC=CONFIG_DRV_IC_INTERRUPT_VECTOR_IDX6 IC_INT_PRI=CONFIG_DRV_IC_INT_PRIORITY_IDX6
IC_INT_SPRI=CONFIG_DRV_IC_INT_SUB_PRIORITY_IDX6 IC_EINT_SRC=CONFIG_DRV_IC_ERR_INTERRUPT_SOURCE_IDX6
IC_EINT_VEC=CONFIG_DRV_IC_ERR_INTERRUPT_VECTOR_IDX6 IC_EINT_PRI=CONFIG_DRV_IC_ERR_INT_PRIORITY_IDX6
IC_EINT_SPRI=CONFIG_DRV_IC_ERR_INT_SUB_PRIORITY_IDX6/>
</#if>
<#if CONFIG_DRV_IC_INST_IDX7 == true>
<@DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE="7" IC_INSTANCE=CONFIG_DRV_IC_PERIPHERAL_ID_IDX7 
IC_MODES=CONFIG_DRV_IC_INPUT_CAPTURE_MODES_IDX7 IC_EDGE_TYPES=CONFIG_DRV_IC_EDGE_TYPES_IDX7
IC_TIMERS=CONFIG_DRV_IC_TIMERS_IDX7 IC_BUF_SIZE=CONFIG_DRV_IC_BUFFER_SIZE_IDX7 
IC_EVE_INT=CONFIG_DRV_IC_EVENTS_PER_INTERRUPT_IDX7 IC_INT_SRC=CONFIG_DRV_IC_INTERRUPT_SOURCE_IDX7
IC_INT_VEC=CONFIG_DRV_IC_INTERRUPT_VECTOR_IDX7 IC_INT_PRI=CONFIG_DRV_IC_INT_PRIORITY_IDX7
IC_INT_SPRI=CONFIG_DRV_IC_INT_SUB_PRIORITY_IDX7 IC_EINT_SRC=CONFIG_DRV_IC_ERR_INTERRUPT_SOURCE_IDX7
IC_EINT_VEC=CONFIG_DRV_IC_ERR_INTERRUPT_VECTOR_IDX7 IC_EINT_PRI=CONFIG_DRV_IC_ERR_INT_PRIORITY_IDX7
IC_EINT_SPRI=CONFIG_DRV_IC_ERR_INT_SUB_PRIORITY_IDX7/>
</#if>
<#if CONFIG_DRV_IC_INST_IDX8 == true>
<@DRV_IC_STATIC_FUNCTIONS DRV_INSTANCE="8" IC_INSTANCE=CONFIG_DRV_IC_PERIPHERAL_ID_IDX8 
IC_MODES=CONFIG_DRV_IC_INPUT_CAPTURE_MODES_IDX8 IC_EDGE_TYPES=CONFIG_DRV_IC_EDGE_TYPES_IDX8
IC_TIMERS=CONFIG_DRV_IC_TIMERS_IDX8 IC_BUF_SIZE=CONFIG_DRV_IC_BUFFER_SIZE_IDX8 
IC_EVE_INT=CONFIG_DRV_IC_EVENTS_PER_INTERRUPT_IDX8 IC_INT_SRC=CONFIG_DRV_IC_INTERRUPT_SOURCE_IDX8
IC_INT_VEC=CONFIG_DRV_IC_INTERRUPT_VECTOR_IDX8 IC_INT_PRI=CONFIG_DRV_IC_INT_PRIORITY_IDX8
IC_INT_SPRI=CONFIG_DRV_IC_INT_SUB_PRIORITY_IDX8 IC_EINT_SRC=CONFIG_DRV_IC_ERR_INTERRUPT_SOURCE_IDX8
IC_EINT_VEC=CONFIG_DRV_IC_ERR_INTERRUPT_VECTOR_IDX8 IC_EINT_PRI=CONFIG_DRV_IC_ERR_INT_PRIORITY_IDX8
IC_EINT_SPRI=CONFIG_DRV_IC_ERR_INT_SUB_PRIORITY_IDX8/>
</#if>
/*******************************************************************************
 End of File
*/
