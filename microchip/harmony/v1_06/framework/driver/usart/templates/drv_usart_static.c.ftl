/*******************************************************************************
  USART Driver Functions for Static Single Instance Driver

  Company:
    Microchip Technology Inc.

  File Name:
    drv_usart_static.c

  Summary:
    USART driver impementation for the static single instance driver.

  Description:
    The USART device driver provides a simple interface to manage the USART
    modules on Microchip microcontrollers. This file contains implemenation
    for the USART driver.
    
  Remarks:
    Static interfaces incorporate the driver instance number within the names
    of the routines, eliminating the need for an object ID or object handle.
    
    Static single-open interfaces also eliminate the need for the open handle.
*******************************************************************************/

//DOM-IGNORE-BEGIN
/*******************************************************************************
Copyright (c) 2013 released Microchip Technology Inc.  All rights reserved.

Microchip licenses to you the right to use, modify, copy and distribute
Software only when embedded on a Microchip microcontroller or digital signal
controller that is integrated into your product or third party product
(pursuant to the sublicense terms in the accompanying license agreement).

You should refer to the license agreement accompanying this Software for
additional information regarding your rights and obligations.

SOFTWARE AND DOCUMENTATION ARE PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF
MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER
CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR
OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR
CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF
SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
(INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
*******************************************************************************/
//DOM-IGNORE-END

#include "system_config.h"
#include "peripheral/usart/plib_usart.h"
#include "peripheral/int/plib_int.h"
#include "system_definitions.h"
 
<#macro DRV_USART_STATIC_FUNCTIONS DRV_INSTANCE USART_INSTANCE BAUD RX_MODES OP_MODES LINECONTROL TX_ENABLE TX_INTR_MODES RX_ENABLE RX_INTR_MODES TX_INT_SRC RX_INT_SRC ERR_INT_SRC INT_VECTOR INT_PRIORITY INT_SUB_PRIORITY TX_INT_VECTOR TX_INT_PRIORITY TX_INT_SUB_PRIORITY RX_INT_VECTOR RX_INT_PRIORITY RX_INT_SUB_PRIORITY ERR_INT_VECTOR ERR_INT_PRIORITY ERR_INT_SUB_PRIORITY>
// *****************************************************************************
// *****************************************************************************
// Section: Instance ${DRV_INSTANCE} static driver functions
// *****************************************************************************
// *****************************************************************************

void DRV_USART${DRV_INSTANCE}_Initialize(void)
{
    /* Initialize USART */
<#if CONFIG_PIC32MX == true>
    PLIB_USART_BaudRateSet(${USART_INSTANCE}, SYS_CLK_PeripheralFrequencyGet(CLK_BUS_PERIPHERAL_1), ${BAUD});
<#else>
    PLIB_USART_BaudRateSet(${USART_INSTANCE}, SYS_CLK_PeripheralFrequencyGet(CLK_BUS_PERIPHERAL_2), ${BAUD});
</#if>
    PLIB_USART_HandshakeModeSelect(${USART_INSTANCE}, ${RX_MODES});
    PLIB_USART_OperationModeSelect(${USART_INSTANCE}, ${OP_MODES});
    PLIB_USART_LineControlModeSelect(${USART_INSTANCE}, ${LINECONTROL});
<#if TX_ENABLE == true>
    PLIB_USART_TransmitterEnable(${USART_INSTANCE});
    PLIB_USART_TransmitterInterruptModeSelect(${USART_INSTANCE}, ${TX_INTR_MODES});
</#if>
<#if RX_ENABLE == true>
    PLIB_USART_ReceiverEnable(${USART_INSTANCE});
    PLIB_USART_ReceiverInterruptModeSelect(${USART_INSTANCE}, ${RX_INTR_MODES});
</#if>
<#if CONFIG_DRV_USART_INTERRUPT_MODE == true>
<#if CONFIG_PIC32MX == true>
    /* Initialize interrupts */
<#if TX_ENABLE == true>
    /* Note: TX interrupt must be enabled when data is ready to be transmitted */
    /* The following code can be used to enable TX Interrupt */
    /* PLIB_INT_SourceEnable(INT_ID_0, ${TX_INT_SRC}); */
</#if>
<#if RX_ENABLE == true>
    PLIB_INT_SourceEnable(INT_ID_0, ${RX_INT_SRC});
</#if>
    PLIB_INT_SourceEnable(INT_ID_0, ${ERR_INT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${INT_VECTOR}, ${INT_PRIORITY});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${INT_VECTOR}, ${INT_SUB_PRIORITY});
</#if>
<#if CONFIG_PIC32MZ == true>
<#if TX_ENABLE == true>

    /* Initialize TX interrupt */

    /* Note: TX interrupt must be enabled when data is ready to be transmitted */
    /* The following code can be used to enable TX Interrupt */
    /* PLIB_INT_SourceEnable(INT_ID_0, ${TX_INT_SRC}); */
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${TX_INT_VECTOR}, ${TX_INT_PRIORITY});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${TX_INT_VECTOR}, ${TX_INT_SUB_PRIORITY});
</#if>

<#if RX_ENABLE == true>
    /* Initialize RX interrupt */
    PLIB_INT_SourceEnable(INT_ID_0, ${RX_INT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${RX_INT_VECTOR}, ${RX_INT_PRIORITY});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${RX_INT_VECTOR}, ${RX_INT_SUB_PRIORITY});
</#if>

    /* Initialize Fault interrupt */
    PLIB_INT_SourceEnable(INT_ID_0, ${ERR_INT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${ERR_INT_VECTOR}, ${ERR_INT_PRIORITY});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${ERR_INT_VECTOR}, ${ERR_INT_SUB_PRIORITY});
</#if>
</#if>

    PLIB_USART_Enable(${USART_INSTANCE});
}

<#if RX_ENABLE == true>
bool DRV_USART${DRV_INSTANCE}_ReceiverBufferIsEmpty(void)
{
   return (!PLIB_USART_ReceiverDataIsAvailable(${USART_INSTANCE}));
}

uint8_t DRV_USART${DRV_INSTANCE}_ReadByte(void)
{
   if(PLIB_USART_ReceiverOverrunHasOccurred(${USART_INSTANCE}))
   {
      PLIB_USART_ReceiverOverrunErrorClear(${USART_INSTANCE});
   }

   return (PLIB_USART_ReceiverByteReceive(${USART_INSTANCE}));
}
</#if>

<#if TX_ENABLE == true>
void DRV_USART${DRV_INSTANCE}_WriteByte(const uint8_t byte)
{
   while(PLIB_USART_TransmitterBufferIsFull(${USART_INSTANCE}))
   {
   }

   PLIB_USART_TransmitterByteSend(${USART_INSTANCE}, byte);
}
</#if>

</#macro>

<#if CONFIG_DRV_USART_INST_IDX0 == true>
<@DRV_USART_STATIC_FUNCTIONS DRV_INSTANCE="0" 
USART_INSTANCE=CONFIG_DRV_USART_PERIPHERAL_ID_IDX0
BAUD=CONFIG_DRV_USART_BAUD_RATE_IDX0
RX_MODES=CONFIG_DRV_USART_STATIC_RX_MODES_IDX0
OP_MODES=CONFIG_DRV_USART_STATIC_OP_MODES_IDX0
LINECONTROL=CONFIG_DRV_USART_STATIC_LINECONTROL_MODES_IDX0
TX_ENABLE=CONFIG_DRV_USART_STATIC_TX_ENABLE_IDX0
TX_INTR_MODES=CONFIG_DRV_USART_STATIC_TX_INTR_MODES_IDX0
RX_ENABLE=CONFIG_DRV_USART_STATIC_RX_ENABLE_IDX0
RX_INTR_MODES=CONFIG_DRV_USART_STATIC_RX_INTR_MODES_IDX0
TX_INT_SRC=CONFIG_DRV_USART_XMIT_INT_SRC_IDX0
RX_INT_SRC=CONFIG_DRV_USART_RCV_INT_SRC_IDX0
ERR_INT_SRC=CONFIG_DRV_USART_ERR_INT_SRC_IDX0
INT_VECTOR=CONFIG_DRV_USART_INT_VECTOR_IDX0
INT_PRIORITY=CONFIG_DRV_USART_INT_PRIORITY_IDX0
INT_SUB_PRIORITY=CONFIG_DRV_USART_INT_SUB_PRIORITY_IDX0
TX_INT_VECTOR=CONFIG_DRV_USART_XMIT_INT_VECTOR_IDX0
TX_INT_PRIORITY=CONFIG_DRV_USART_XMIT_INT_PRIORITY_IDX0
TX_INT_SUB_PRIORITY=CONFIG_DRV_USART_XMIT_INT_SUB_PRIORITY_IDX0
RX_INT_VECTOR=CONFIG_DRV_USART_RCV_INT_VECTOR_IDX0
RX_INT_PRIORITY=CONFIG_DRV_USART_RCV_INT_PRIORITY_IDX0
RX_INT_SUB_PRIORITY=CONFIG_DRV_USART_RCV_INT_SUB_PRIORITY_IDX0
ERR_INT_VECTOR=CONFIG_DRV_USART_ERR_INT_VECTOR_IDX0
ERR_INT_PRIORITY=CONFIG_DRV_USART_ERR_INT_PRIORITY_IDX0
ERR_INT_SUB_PRIORITY=CONFIG_DRV_USART_ERR_INT_SUB_PRIORITY_IDX0
/>
</#if>
<#if CONFIG_DRV_USART_INST_IDX1 == true>
<@DRV_USART_STATIC_FUNCTIONS DRV_INSTANCE="1" 
USART_INSTANCE=CONFIG_DRV_USART_PERIPHERAL_ID_IDX1
BAUD=CONFIG_DRV_USART_BAUD_RATE_IDX1
RX_MODES=CONFIG_DRV_USART_STATIC_RX_MODES_IDX1
OP_MODES=CONFIG_DRV_USART_STATIC_OP_MODES_IDX1
LINECONTROL=CONFIG_DRV_USART_STATIC_LINECONTROL_MODES_IDX1
TX_ENABLE=CONFIG_DRV_USART_STATIC_TX_ENABLE_IDX1
TX_INTR_MODES=CONFIG_DRV_USART_STATIC_TX_INTR_MODES_IDX1
RX_ENABLE=CONFIG_DRV_USART_STATIC_RX_ENABLE_IDX1
RX_INTR_MODES=CONFIG_DRV_USART_STATIC_RX_INTR_MODES_IDX1
TX_INT_SRC=CONFIG_DRV_USART_XMIT_INT_SRC_IDX1
RX_INT_SRC=CONFIG_DRV_USART_RCV_INT_SRC_IDX1
ERR_INT_SRC=CONFIG_DRV_USART_ERR_INT_SRC_IDX1
INT_VECTOR=CONFIG_DRV_USART_INT_VECTOR_IDX1
INT_PRIORITY=CONFIG_DRV_USART_INT_PRIORITY_IDX1
INT_SUB_PRIORITY=CONFIG_DRV_USART_INT_SUB_PRIORITY_IDX1
TX_INT_VECTOR=CONFIG_DRV_USART_XMIT_INT_VECTOR_IDX1
TX_INT_PRIORITY=CONFIG_DRV_USART_XMIT_INT_PRIORITY_IDX1
TX_INT_SUB_PRIORITY=CONFIG_DRV_USART_XMIT_INT_SUB_PRIORITY_IDX1
RX_INT_VECTOR=CONFIG_DRV_USART_RCV_INT_VECTOR_IDX1
RX_INT_PRIORITY=CONFIG_DRV_USART_RCV_INT_PRIORITY_IDX1
RX_INT_SUB_PRIORITY=CONFIG_DRV_USART_RCV_INT_SUB_PRIORITY_IDX1
ERR_INT_VECTOR=CONFIG_DRV_USART_ERR_INT_VECTOR_IDX1
ERR_INT_PRIORITY=CONFIG_DRV_USART_ERR_INT_PRIORITY_IDX1
ERR_INT_SUB_PRIORITY=CONFIG_DRV_USART_ERR_INT_SUB_PRIORITY_IDX1
/>
</#if>
<#if CONFIG_DRV_USART_INST_IDX2 == true>
<@DRV_USART_STATIC_FUNCTIONS DRV_INSTANCE="2" 
USART_INSTANCE=CONFIG_DRV_USART_PERIPHERAL_ID_IDX2
BAUD=CONFIG_DRV_USART_BAUD_RATE_IDX2
RX_MODES=CONFIG_DRV_USART_STATIC_RX_MODES_IDX2
OP_MODES=CONFIG_DRV_USART_STATIC_OP_MODES_IDX2
LINECONTROL=CONFIG_DRV_USART_STATIC_LINECONTROL_MODES_IDX2
TX_ENABLE=CONFIG_DRV_USART_STATIC_TX_ENABLE_IDX2
TX_INTR_MODES=CONFIG_DRV_USART_STATIC_TX_INTR_MODES_IDX2
RX_ENABLE=CONFIG_DRV_USART_STATIC_RX_ENABLE_IDX2
RX_INTR_MODES=CONFIG_DRV_USART_STATIC_RX_INTR_MODES_IDX2
TX_INT_SRC=CONFIG_DRV_USART_XMIT_INT_SRC_IDX2
RX_INT_SRC=CONFIG_DRV_USART_RCV_INT_SRC_IDX2
ERR_INT_SRC=CONFIG_DRV_USART_ERR_INT_SRC_IDX2
INT_VECTOR=CONFIG_DRV_USART_INT_VECTOR_IDX2
INT_PRIORITY=CONFIG_DRV_USART_INT_PRIORITY_IDX2
INT_SUB_PRIORITY=CONFIG_DRV_USART_INT_SUB_PRIORITY_IDX2
TX_INT_VECTOR=CONFIG_DRV_USART_XMIT_INT_VECTOR_IDX2
TX_INT_PRIORITY=CONFIG_DRV_USART_XMIT_INT_PRIORITY_IDX2
TX_INT_SUB_PRIORITY=CONFIG_DRV_USART_XMIT_INT_SUB_PRIORITY_IDX2
RX_INT_VECTOR=CONFIG_DRV_USART_RCV_INT_VECTOR_IDX2
RX_INT_PRIORITY=CONFIG_DRV_USART_RCV_INT_PRIORITY_IDX2
RX_INT_SUB_PRIORITY=CONFIG_DRV_USART_RCV_INT_SUB_PRIORITY_IDX2
ERR_INT_VECTOR=CONFIG_DRV_USART_ERR_INT_VECTOR_IDX2
ERR_INT_PRIORITY=CONFIG_DRV_USART_ERR_INT_PRIORITY_IDX2
ERR_INT_SUB_PRIORITY=CONFIG_DRV_USART_ERR_INT_SUB_PRIORITY_IDX2
/>
</#if>
<#if CONFIG_DRV_USART_INST_IDX3 == true>
<@DRV_USART_STATIC_FUNCTIONS DRV_INSTANCE="3" 
USART_INSTANCE=CONFIG_DRV_USART_PERIPHERAL_ID_IDX3
BAUD=CONFIG_DRV_USART_BAUD_RATE_IDX3
RX_MODES=CONFIG_DRV_USART_STATIC_RX_MODES_IDX3
OP_MODES=CONFIG_DRV_USART_STATIC_OP_MODES_IDX3
LINECONTROL=CONFIG_DRV_USART_STATIC_LINECONTROL_MODES_IDX3
TX_ENABLE=CONFIG_DRV_USART_STATIC_TX_ENABLE_IDX3
TX_INTR_MODES=CONFIG_DRV_USART_STATIC_TX_INTR_MODES_IDX3
RX_ENABLE=CONFIG_DRV_USART_STATIC_RX_ENABLE_IDX3
RX_INTR_MODES=CONFIG_DRV_USART_STATIC_RX_INTR_MODES_IDX3
TX_INT_SRC=CONFIG_DRV_USART_XMIT_INT_SRC_IDX3
RX_INT_SRC=CONFIG_DRV_USART_RCV_INT_SRC_IDX3
ERR_INT_SRC=CONFIG_DRV_USART_ERR_INT_SRC_IDX3
INT_VECTOR=CONFIG_DRV_USART_INT_VECTOR_IDX3
INT_PRIORITY=CONFIG_DRV_USART_INT_PRIORITY_IDX3
INT_SUB_PRIORITY=CONFIG_DRV_USART_INT_SUB_PRIORITY_IDX3
TX_INT_VECTOR=CONFIG_DRV_USART_XMIT_INT_VECTOR_IDX3
TX_INT_PRIORITY=CONFIG_DRV_USART_XMIT_INT_PRIORITY_IDX3
TX_INT_SUB_PRIORITY=CONFIG_DRV_USART_XMIT_INT_SUB_PRIORITY_IDX3
RX_INT_VECTOR=CONFIG_DRV_USART_RCV_INT_VECTOR_IDX3
RX_INT_PRIORITY=CONFIG_DRV_USART_RCV_INT_PRIORITY_IDX3
RX_INT_SUB_PRIORITY=CONFIG_DRV_USART_RCV_INT_SUB_PRIORITY_IDX3
ERR_INT_VECTOR=CONFIG_DRV_USART_ERR_INT_VECTOR_IDX3
ERR_INT_PRIORITY=CONFIG_DRV_USART_ERR_INT_PRIORITY_IDX3
ERR_INT_SUB_PRIORITY=CONFIG_DRV_USART_ERR_INT_SUB_PRIORITY_IDX3
/>
</#if>
<#if CONFIG_DRV_USART_INST_IDX4 == true>
<@DRV_USART_STATIC_FUNCTIONS DRV_INSTANCE="4" 
USART_INSTANCE=CONFIG_DRV_USART_PERIPHERAL_ID_IDX4
BAUD=CONFIG_DRV_USART_BAUD_RATE_IDX4
RX_MODES=CONFIG_DRV_USART_STATIC_RX_MODES_IDX4
OP_MODES=CONFIG_DRV_USART_STATIC_OP_MODES_IDX4
LINECONTROL=CONFIG_DRV_USART_STATIC_LINECONTROL_MODES_IDX4
TX_ENABLE=CONFIG_DRV_USART_STATIC_TX_ENABLE_IDX4
TX_INTR_MODES=CONFIG_DRV_USART_STATIC_TX_INTR_MODES_IDX4
RX_ENABLE=CONFIG_DRV_USART_STATIC_RX_ENABLE_IDX4
RX_INTR_MODES=CONFIG_DRV_USART_STATIC_RX_INTR_MODES_IDX4
TX_INT_SRC=CONFIG_DRV_USART_XMIT_INT_SRC_IDX4
RX_INT_SRC=CONFIG_DRV_USART_RCV_INT_SRC_IDX4
ERR_INT_SRC=CONFIG_DRV_USART_ERR_INT_SRC_IDX4
INT_VECTOR=CONFIG_DRV_USART_INT_VECTOR_IDX4
INT_PRIORITY=CONFIG_DRV_USART_INT_PRIORITY_IDX4
INT_SUB_PRIORITY=CONFIG_DRV_USART_INT_SUB_PRIORITY_IDX4
TX_INT_VECTOR=CONFIG_DRV_USART_XMIT_INT_VECTOR_IDX4
TX_INT_PRIORITY=CONFIG_DRV_USART_XMIT_INT_PRIORITY_IDX4
TX_INT_SUB_PRIORITY=CONFIG_DRV_USART_XMIT_INT_SUB_PRIORITY_IDX4
RX_INT_VECTOR=CONFIG_DRV_USART_RCV_INT_VECTOR_IDX4
RX_INT_PRIORITY=CONFIG_DRV_USART_RCV_INT_PRIORITY_IDX4
RX_INT_SUB_PRIORITY=CONFIG_DRV_USART_RCV_INT_SUB_PRIORITY_IDX4
ERR_INT_VECTOR=CONFIG_DRV_USART_ERR_INT_VECTOR_IDX4
ERR_INT_PRIORITY=CONFIG_DRV_USART_ERR_INT_PRIORITY_IDX4
ERR_INT_SUB_PRIORITY=CONFIG_DRV_USART_ERR_INT_SUB_PRIORITY_IDX4
/>
</#if>
<#if CONFIG_DRV_USART_INST_IDX5 == true>
<@DRV_USART_STATIC_FUNCTIONS DRV_INSTANCE="5" 
USART_INSTANCE=CONFIG_DRV_USART_PERIPHERAL_ID_IDX5
BAUD=CONFIG_DRV_USART_BAUD_RATE_IDX5
RX_MODES=CONFIG_DRV_USART_STATIC_RX_MODES_IDX5
OP_MODES=CONFIG_DRV_USART_STATIC_OP_MODES_IDX5
LINECONTROL=CONFIG_DRV_USART_STATIC_LINECONTROL_MODES_IDX5
TX_ENABLE=CONFIG_DRV_USART_STATIC_TX_ENABLE_IDX5
TX_INTR_MODES=CONFIG_DRV_USART_STATIC_TX_INTR_MODES_IDX5
RX_ENABLE=CONFIG_DRV_USART_STATIC_RX_ENABLE_IDX5
RX_INTR_MODES=CONFIG_DRV_USART_STATIC_RX_INTR_MODES_IDX5
TX_INT_SRC=CONFIG_DRV_USART_XMIT_INT_SRC_IDX5
RX_INT_SRC=CONFIG_DRV_USART_RCV_INT_SRC_IDX5
ERR_INT_SRC=CONFIG_DRV_USART_ERR_INT_SRC_IDX5
INT_VECTOR=CONFIG_DRV_USART_INT_VECTOR_IDX5
INT_PRIORITY=CONFIG_DRV_USART_INT_PRIORITY_IDX5
INT_SUB_PRIORITY=CONFIG_DRV_USART_INT_SUB_PRIORITY_IDX5
TX_INT_VECTOR=CONFIG_DRV_USART_XMIT_INT_VECTOR_IDX5
TX_INT_PRIORITY=CONFIG_DRV_USART_XMIT_INT_PRIORITY_IDX5
TX_INT_SUB_PRIORITY=CONFIG_DRV_USART_XMIT_INT_SUB_PRIORITY_IDX5
RX_INT_VECTOR=CONFIG_DRV_USART_RCV_INT_VECTOR_IDX5
RX_INT_PRIORITY=CONFIG_DRV_USART_RCV_INT_PRIORITY_IDX5
RX_INT_SUB_PRIORITY=CONFIG_DRV_USART_RCV_INT_SUB_PRIORITY_IDX5
ERR_INT_VECTOR=CONFIG_DRV_USART_ERR_INT_VECTOR_IDX5
ERR_INT_PRIORITY=CONFIG_DRV_USART_ERR_INT_PRIORITY_IDX5
ERR_INT_SUB_PRIORITY=CONFIG_DRV_USART_ERR_INT_SUB_PRIORITY_IDX5
/>
</#if>

/*******************************************************************************
 End of File
*/
