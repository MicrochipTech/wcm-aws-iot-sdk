config DRV_USART_INSTANCES_NUMBER_GT_${INSTANCE+1}
    depends on USE_DRV_USART
    bool
<#if INSTANCE != 0>
	default n if DRV_USART_INSTANCES_NUMBER_GT_${INSTANCE} = n     
</#if>	
	default n if DRV_USART_INSTANCES_NUMBER = ${INSTANCE+1}
	default y
	
config DRV_USART_INST_IDX${INSTANCE}
    depends on USE_DRV_USART 
<#if INSTANCE != 0>
	             && DRV_USART_INSTANCES_NUMBER_GT_${INSTANCE}
</#if>
    bool "USART Driver Instance ${INSTANCE}"
    default y
    ---help---
    IDH_HTML_DRV_USART_INSTANCES_NUMBER
    ---endhelp---

ifblock DRV_USART_INST_IDX${INSTANCE}

config DRV_USART_PERIPHERAL_ID_IDX${INSTANCE}
    string "USART Module ID"
    depends on USE_DRV_USART
    range USART_MODULE_ID
    default "USART_ID_1"
    ---help---
    IDH_HTML_USART_MODULE_ID
    ---endhelp---

menu "RTOS Configuration (Instance ${INSTANCE})"
    depends on USE_DRV_USART
    depends on USE_3RDPARTY_RTOS
    depends on DRV_USART_DRIVER_MODE = "DYNAMIC"

config DRV_USART_RTOS_IDX${INSTANCE}
    string "Run This Driver Instance As"
    depends on DRV_USART_DRIVER_MODE = "DYNAMIC"
    range 3RDPARTY_RTOS_SYS_TASKS_OPTIONS
    default "Combined with System Tasks"

config DRV_USART_IDX${INSTANCE}_RTOS_TASK_SIZE
    int "Task Size"
    depends on DRV_USART_RTOS_IDX${INSTANCE} = "Standalone"
    default 1024

config DRV_USART_IDX${INSTANCE}_RTOS_TASK_PRIORITY
    int "Task Priority"
    depends on DRV_USART_RTOS_IDX${INSTANCE} = "Standalone"
    default 1

config DRV_USART_IDX${INSTANCE}_RTOS_USE_DELAY
    bool "Use Task Delay?"
    depends on DRV_USART_RTOS_IDX${INSTANCE} = "Standalone"
    default y

config DRV_USART_IDX${INSTANCE}_RTOS_DELAY
    int "Task Delay"
    depends on DRV_USART_RTOS_IDX${INSTANCE} = "Standalone"
    depends on DRV_USART_IDX${INSTANCE}_RTOS_USE_DELAY
    default 1000
endmenu

config DRV_USART_BAUD_RATE_IDX${INSTANCE}
    int "Baud Rate"
    depends on USE_DRV_USART
    default 9600
    ---help---
    IDH_HTML_DRV_USART_INIT
    ---endhelp---

config DRV_USART_XMIT_INT_SRC_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    default "INT_SOURCE_USART_1_TRANSMIT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "INT_SOURCE_USART_2_TRANSMIT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "INT_SOURCE_USART_3_TRANSMIT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "INT_SOURCE_USART_4_TRANSMIT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "INT_SOURCE_USART_5_TRANSMIT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "INT_SOURCE_USART_6_TRANSMIT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_RCV_INT_SRC_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    default "INT_SOURCE_USART_1_RECEIVE" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "INT_SOURCE_USART_2_RECEIVE" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "INT_SOURCE_USART_3_RECEIVE" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "INT_SOURCE_USART_4_RECEIVE" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "INT_SOURCE_USART_5_RECEIVE" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "INT_SOURCE_USART_6_RECEIVE" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_ERR_INT_SRC_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    default "INT_SOURCE_USART_1_ERROR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "INT_SOURCE_USART_2_ERROR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "INT_SOURCE_USART_3_ERROR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "INT_SOURCE_USART_4_ERROR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "INT_SOURCE_USART_5_ERROR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "INT_SOURCE_USART_6_ERROR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

# PIC32MX
config DRV_USART_INT_VECTOR_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE
    default "INT_VECTOR_UART1" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "INT_VECTOR_UART2" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "INT_VECTOR_UART3" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "INT_VECTOR_UART4" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "INT_VECTOR_UART5" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "INT_VECTOR_UART6" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_ISR_VECTOR_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MX
    default "_UART_1_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "_UART_2_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "_UART_3_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "_UART_4_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "_UART_5_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "_UART_6_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_INT_PRIORITY_IDX${INSTANCE}
    string "USART Interrupt Priority"
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MX
    range INT_PRIORITY_LEVEL
    default "INT_PRIORITY_LEVEL1"
    ---help---
    IDH_HTML_INT_PRIORITY_LEVEL
    ---endhelp---

config DRV_USART_INT_SUB_PRIORITY_IDX${INSTANCE}
    string "USART Interrupt Sub-priority"
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MX
    range INT_SUBPRIORITY_LEVEL
    default "INT_SUBPRIORITY_LEVEL0"
    ---help---
    IDH_HTML_INT_SUBPRIORITY_LEVEL
    ---endhelp---

config DRV_USART_INT_PRIO_NUM_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MX
    default "0" if DRV_USART_INT_PRIORITY_IDX${INSTANCE} = "INT_DISABLE_INTERRUPT"
    default "1" if DRV_USART_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL1"
    default "2" if DRV_USART_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL2"
    default "3" if DRV_USART_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL3"
    default "4" if DRV_USART_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL4"
    default "5" if DRV_USART_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL5"
    default "6" if DRV_USART_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL6"
    default "7" if DRV_USART_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL7"

# PIC32MZ
# Transmit
config DRV_USART_XMIT_INT_VECTOR_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE
    default "INT_VECTOR_UART1_TX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "INT_VECTOR_UART2_TX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "INT_VECTOR_UART3_TX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "INT_VECTOR_UART4_TX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "INT_VECTOR_UART5_TX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "INT_VECTOR_UART6_TX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_XMIT_ISR_VECTOR_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    default "_UART1_TX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "_UART2_TX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "_UART3_TX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "_UART4_TX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "_UART5_TX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "_UART6_TX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_XMIT_INT_PRIORITY_IDX${INSTANCE}
    string "Transmit Interrupt Priority"
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    range INT_PRIORITY_LEVEL
    default "INT_PRIORITY_LEVEL1"
    ---help---
    IDH_HTML_INT_PRIORITY_LEVEL
    ---endhelp---

config DRV_USART_XMIT_INT_SUB_PRIORITY_IDX${INSTANCE}
    string "Transmit Interrupt Sub-priority"
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    range INT_SUBPRIORITY_LEVEL
    default "INT_SUBPRIORITY_LEVEL0"
    ---help---
    IDH_HTML_INT_SUBPRIORITY_LEVEL
    ---endhelp---

config DRV_USART_XMIT_INT_PRIO_NUM_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    default "0" if DRV_USART_XMIT_INT_PRIORITY_IDX${INSTANCE} = "INT_DISABLE_INTERRUPT"
    default "1" if DRV_USART_XMIT_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL1"
    default "2" if DRV_USART_XMIT_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL2"
    default "3" if DRV_USART_XMIT_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL3"
    default "4" if DRV_USART_XMIT_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL4"
    default "5" if DRV_USART_XMIT_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL5"
    default "6" if DRV_USART_XMIT_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL6"
    default "7" if DRV_USART_XMIT_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL7"

# Receive
config DRV_USART_RCV_INT_VECTOR_IDX${INSTANCE}
    string
    depends on DRV_USART_INTERRUPT_MODE
    depends on USE_DRV_USART
    default "INT_VECTOR_UART1_RX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "INT_VECTOR_UART2_RX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "INT_VECTOR_UART3_RX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "INT_VECTOR_UART4_RX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "INT_VECTOR_UART5_RX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "INT_VECTOR_UART6_RX" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_RCV_ISR_VECTOR_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    default "_UART1_RX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "_UART2_RX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "_UART3_RX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "_UART4_RX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "_UART5_RX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "_UART6_RX_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_RCV_INT_PRIORITY_IDX${INSTANCE}
    string "Receive Interrupt Priority"
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    range INT_PRIORITY_LEVEL
    default "INT_PRIORITY_LEVEL1"
    ---help---
    IDH_HTML_INT_PRIORITY_LEVEL
    ---endhelp---

config DRV_USART_RCV_INT_SUB_PRIORITY_IDX${INSTANCE}
    string "Receive Interrupt Sub-priority"
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    range INT_SUBPRIORITY_LEVEL
    default "INT_SUBPRIORITY_LEVEL0"
    ---help---
    IDH_HTML_INT_SUBPRIORITY_LEVEL
    ---endhelp---

config DRV_USART_RCV_INT_PRIO_NUM_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    default "0" if DRV_USART_RCV_INT_PRIORITY_IDX${INSTANCE} = "INT_DISABLE_INTERRUPT"
    default "1" if DRV_USART_RCV_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL1"
    default "2" if DRV_USART_RCV_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL2"
    default "3" if DRV_USART_RCV_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL3"
    default "4" if DRV_USART_RCV_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL4"
    default "5" if DRV_USART_RCV_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL5"
    default "6" if DRV_USART_RCV_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL6"
    default "7" if DRV_USART_RCV_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL7"

#Error
config DRV_USART_ERR_INT_VECTOR_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE
    default "INT_VECTOR_UART1_FAULT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "INT_VECTOR_UART2_FAULT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "INT_VECTOR_UART3_FAULT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "INT_VECTOR_UART4_FAULT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "INT_VECTOR_UART5_FAULT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "INT_VECTOR_UART6_FAULT" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_ERR_ISR_VECTOR_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    default "_UART1_FAULT_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_1"
    default "_UART2_FAULT_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_2"
    default "_UART3_FAULT_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_3"
    default "_UART4_FAULT_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_4"
    default "_UART5_FAULT_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_5"
    default "_UART6_FAULT_VECTOR" if DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} = "USART_ID_6"

config DRV_USART_ERR_INT_PRIORITY_IDX${INSTANCE}
    string "Error Interrupt Priority"
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    range INT_PRIORITY_LEVEL
    default "INT_PRIORITY_LEVEL1"
    ---help---
    IDH_HTML_INT_PRIORITY_LEVEL
    ---endhelp---

config DRV_USART_ERR_INT_SUB_PRIORITY_IDX${INSTANCE}
    string "Error Interrupt Sub-priority"
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    range INT_SUBPRIORITY_LEVEL
    default "INT_SUBPRIORITY_LEVEL0"
    ---help---
    IDH_HTML_INT_SUBPRIORITY_LEVEL
    ---endhelp---

config DRV_USART_ERR_INT_PRIO_NUM_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_INTERRUPT_MODE && PIC32MZ
    default "0" if DRV_USART_ERR_INT_PRIORITY_IDX${INSTANCE} = "INT_DISABLE_INTERRUPT"
    default "1" if DRV_USART_ERR_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL1"
    default "2" if DRV_USART_ERR_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL2"
    default "3" if DRV_USART_ERR_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL3"
    default "4" if DRV_USART_ERR_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL4"
    default "5" if DRV_USART_ERR_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL5"
    default "6" if DRV_USART_ERR_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL6"
    default "7" if DRV_USART_ERR_INT_PRIORITY_IDX${INSTANCE} = "INT_PRIORITY_LEVEL7"

config DRV_USART_USE_RX_PIN_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "STATIC" && DRV_USART_STATIC_RX_ENABLE_IDX${INSTANCE}
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "DYNAMIC"

config DRV_USART_USE_TX_PIN_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "STATIC" && DRV_USART_STATIC_TX_ENABLE_IDX${INSTANCE}
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "DYNAMIC"

config DRV_USART_USE_CTS_PIN_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "STATIC" && DRV_USART_STATIC_OP_MODES_IDX${INSTANCE} = "USART_ENABLE_TX_RX_CTS_RTS_USED"
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "DYNAMIC" && DRV_USART_HANDSHAKE_MODE_IDX${INSTANCE} = "DRV_USART_HANDSHAKE_FLOWCONTROL"
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "DYNAMIC" && DRV_USART_HANDSHAKE_MODE_IDX${INSTANCE} = "DRV_USART_HANDSHAKE_SIMPLEX"

config DRV_USART_USE_RTS_PIN_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "STATIC" && DRV_USART_STATIC_OP_MODES_IDX${INSTANCE} = "USART_ENABLE_TX_RX_BCLK_USED"
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "STATIC" && DRV_USART_STATIC_OP_MODES_IDX${INSTANCE} = "USART_ENABLE_TX_RX_CTS_RTS_USED"
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "STATIC" && DRV_USART_STATIC_OP_MODES_IDX${INSTANCE} = "USART_ENABLE_TX_RX_RTS_USED"
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "DYNAMIC" && DRV_USART_OPER_MODE_IDX${INSTANCE} = "DRV_USART_OPERATION_MODE_IRDA"
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "DYNAMIC" && DRV_USART_HANDSHAKE_MODE_IDX${INSTANCE} = "DRV_USART_HANDSHAKE_FLOWCONTROL"
    default DRV_USART_PERIPHERAL_ID_IDX${INSTANCE} if DRV_USART_DRIVER_MODE = "DYNAMIC" && DRV_USART_HANDSHAKE_MODE_IDX${INSTANCE} = "DRV_USART_HANDSHAKE_SIMPLEX"


ifblock DRV_USART_DRIVER_MODE = "STATIC"

config DRV_USART_STATIC_RX_MODES_IDX${INSTANCE}
    string "Handshake Mode"
    depends on USE_DRV_USART
    range USART_HANDSHAKE_MODE
    default "USART_HANDSHAKE_MODE_FLOW_CONTROL"
    ---help---
    IDH_HTML_USART_HANDSHAKE_MODE
    ---endhelp---

config DRV_USART_STATIC_OP_MODES_IDX${INSTANCE}
    string "Operation Mode"
    depends on USE_DRV_USART
    range USART_OPERATION_MODE
    default "USART_ENABLE_TX_RX_USED"
    ---help---
    IDH_HTML_USART_OPERATION_MODE
    ---endhelp---

config DRV_USART_STATIC_LINECONTROL_MODES_IDX${INSTANCE}
    string "Line Control Mode"
    depends on USE_DRV_USART
    range USART_LINECONTROL_MODE
    default "USART_8N1"
    ---help---
    IDH_HTML_USART_LINECONTROL_MODE
    ---endhelp---

config DRV_USART_STATIC_TX_ENABLE_IDX${INSTANCE}
    bool "Enable TX"
    depends on USE_DRV_USART
    default y
    ---help---
    IDH_HTML_PLIB_USART_TransmitterEnable_USART_MODULE_ID
    ---endhelp---

config DRV_USART_STATIC_RX_ENABLE_IDX${INSTANCE}
    bool "Enable RX"
    depends on USE_DRV_USART
    default y
    ---help---
    IDH_HTML_PLIB_USART_ReceiverEnable_USART_MODULE_ID
    ---endhelp---

config DRV_USART_STATIC_TX_INTR_MODES_IDX${INSTANCE}
    string "TX Interrupt Mode"
    depends on USE_DRV_USART
    depends on DRV_USART_STATIC_TX_ENABLE_IDX${INSTANCE}
    range USART_TRANSMIT_INTR_MODE
    default "USART_TRANSMIT_FIFO_NOT_FULL"
    ---help---
    IDH_HTML_USART_TRANSMIT_INTR_MODE
    ---endhelp---

config DRV_USART_STATIC_RX_INTR_MODES_IDX${INSTANCE}
    string "RX Interrupt Mode"
    depends on USE_DRV_USART
    depends on DRV_USART_STATIC_RX_ENABLE_IDX${INSTANCE}
    range USART_RECEIVE_INTR_MODE
    default "USART_RECEIVE_FIFO_ONE_CHAR"
    ---help---
    IDH_HTML_USART_RECEIVE_INTR_MODE
    ---endhelp---




endif

ifblock DRV_USART_DRIVER_MODE = "DYNAMIC"

config DRV_USART_OPER_MODE_IDX${INSTANCE}
    string "Operation Mode"
    depends on USE_DRV_USART
    range DRV_USART_OPERATION_MODE
    default "DRV_USART_OPERATION_MODE_NORMAL"
    ---help---
    IDH_HTML_DRV_USART_OPERATION_MODE
    ---endhelp---

config DRV_USART_OPER_MODE_DATA_IDX${INSTANCE}
    hex "Operation Mode Data (hexadecimal)"
    depends on USE_DRV_USART
    default 0x00
    ---help---
    IDH_HTML_DRV_USART_OPERATION_MODE_DATA
    ---endhelp---

config DRV_USART_INIT_FLAG_WAKE_ON_START_IDX${INSTANCE}
    bool "Wake On Start"
    depends on USE_DRV_USART
    default n
    ---help---
    IDH_HTML_DRV_USART_INIT_FLAGS
    ---endhelp---

config DRV_USART_INIT_FLAG_AUTO_BAUD_IDX${INSTANCE}
    bool "Auto Baud"
    depends on USE_DRV_USART
    default n
    ---help---
    IDH_HTML_DRV_USART_INIT_FLAGS
    ---endhelp---

config DRV_USART_INIT_FLAG_STOP_IN_IDLE_IDX${INSTANCE}
    bool "Stop In Idle"
    depends on USE_DRV_USART
    default n
    ---help---
    IDH_HTML_DRV_USART_INIT_FLAGS
    ---endhelp---

config DRV_USART_INIT_FLAGS_IDX${INSTANCE}
    int
    depends on USE_DRV_USART
    default 0 if !DRV_USART_INIT_FLAG_STOP_IN_IDLE_IDX${INSTANCE} && !DRV_USART_INIT_FLAG_AUTO_BAUD_IDX${INSTANCE} && !DRV_USART_INIT_FLAG_WAKE_ON_START_IDX${INSTANCE}
    default 1 if !DRV_USART_INIT_FLAG_STOP_IN_IDLE_IDX${INSTANCE} && !DRV_USART_INIT_FLAG_AUTO_BAUD_IDX${INSTANCE} && DRV_USART_INIT_FLAG_WAKE_ON_START_IDX${INSTANCE}
    default 2 if !DRV_USART_INIT_FLAG_STOP_IN_IDLE_IDX${INSTANCE} && DRV_USART_INIT_FLAG_AUTO_BAUD_IDX${INSTANCE} && !DRV_USART_INIT_FLAG_WAKE_ON_START_IDX${INSTANCE}
    default 3 if !DRV_USART_INIT_FLAG_STOP_IN_IDLE_IDX${INSTANCE} && DRV_USART_INIT_FLAG_AUTO_BAUD_IDX${INSTANCE} && DRV_USART_INIT_FLAG_WAKE_ON_START_IDX${INSTANCE}
    default 4 if DRV_USART_INIT_FLAG_STOP_IN_IDLE_IDX${INSTANCE} && !DRV_USART_INIT_FLAG_AUTO_BAUD_IDX${INSTANCE} && !DRV_USART_INIT_FLAG_WAKE_ON_START_IDX${INSTANCE}
    default 5 if DRV_USART_INIT_FLAG_STOP_IN_IDLE_IDX${INSTANCE} && !DRV_USART_INIT_FLAG_AUTO_BAUD_IDX${INSTANCE} && DRV_USART_INIT_FLAG_WAKE_ON_START_IDX${INSTANCE}
    default 6 if DRV_USART_INIT_FLAG_STOP_IN_IDLE_IDX${INSTANCE} && DRV_USART_INIT_FLAG_AUTO_BAUD_IDX${INSTANCE} && !DRV_USART_INIT_FLAG_WAKE_ON_START_IDX${INSTANCE}
    default 7 if DRV_USART_INIT_FLAG_STOP_IN_IDLE_IDX${INSTANCE} && DRV_USART_INIT_FLAG_AUTO_BAUD_IDX${INSTANCE} && DRV_USART_INIT_FLAG_WAKE_ON_START_IDX${INSTANCE}

config DRV_USART_BRG_CLOCK_IDX${INSTANCE}
    string "Baud Rate Generator Clock"
    depends on USE_DRV_USART
    depends on USE_DRV_USART
    default SYS_CLK_PBCLK_FREQ if PIC32MX
    default SYS_CLK_PBCLK1_FREQ if PIC32MZ
    persistent
    ---help---
    IDH_HTML_DRV_USART_INIT
    ---endhelp---

config DRV_USART_LINE_CNTRL_IDX${INSTANCE}
    string "Line Control"
    depends on USE_DRV_USART
    range DRV_USART_LINE_CONTROL
    default "DRV_USART_LINE_CONTROL_8NONE1"
    ---help---
    IDH_HTML_DRV_USART_LINE_CONTROL
    ---endhelp---

config DRV_USART_HANDSHAKE_MODE_IDX${INSTANCE}
    string "Handshake Mode"
    depends on USE_DRV_USART
    range DRV_USART_HANDSHAKE
    default "DRV_USART_HANDSHAKE_NONE"
    ---help---
    IDH_HTML_DRV_USART_INIT
    ---endhelp---

ifblock DRV_USART_BUFFER_QUEUE_SUPPORT 

config DRV_USART_XMIT_QUEUE_SIZE_IDX${INSTANCE}
    int "Transmit Queue Size"
    depends on USE_DRV_USART
    default 10
    ---help---
    IDH_HTML_DRV_USART_INIT
    ---endhelp---

config DRV_USART_RCV_QUEUE_SIZE_IDX${INSTANCE}
    int "Receive Queue Size"
    depends on USE_DRV_USART
    default 10
    ---help---
    IDH_HTML_DRV_USART_INIT
    ---endhelp---

endif

config DRV_USART_XMIT_DMA_CH_IDX${INSTANCE}
    int "Transmit DMA Channel Instance"
    depends on USE_DRV_USART
    depends on DRV_USART_SUPPORT_TRANSMIT_DMA
    range 0 0 if DMA_NUMBER_OF_CHANNELS = "1"
    range 0 1 if DMA_NUMBER_OF_CHANNELS = "2"
    range 0 2 if DMA_NUMBER_OF_CHANNELS = "3"
    range 0 3 if DMA_NUMBER_OF_CHANNELS = "4"
    range 0 4 if DMA_NUMBER_OF_CHANNELS = "5"
    range 0 5 if DMA_NUMBER_OF_CHANNELS = "6"
    range 0 6 if DMA_NUMBER_OF_CHANNELS = "7"
    range 0 7 if DMA_NUMBER_OF_CHANNELS = "8"
    default 0
    ---help---
    IDH_HTML_DMA_CHANNEL
    ---endhelp---

config DRV_USART_RCV_DMA_CH_IDX${INSTANCE}
    int "Receive DMA Channel Instance"
    depends on USE_DRV_USART
    depends on DRV_USART_SUPPORT_RECEIVE_DMA
    range 0 0 if DMA_NUMBER_OF_CHANNELS = "1"
    range 0 1 if DMA_NUMBER_OF_CHANNELS = "2"
    range 0 2 if DMA_NUMBER_OF_CHANNELS = "3"
    range 0 3 if DMA_NUMBER_OF_CHANNELS = "4"
    range 0 4 if DMA_NUMBER_OF_CHANNELS = "5"
    range 0 5 if DMA_NUMBER_OF_CHANNELS = "6"
    range 0 6 if DMA_NUMBER_OF_CHANNELS = "7"
    range 0 7 if DMA_NUMBER_OF_CHANNELS = "8"
    default 1
    ---help---
    IDH_HTML_DMA_CHANNEL
    ---endhelp---

config DRV_USART_XMIT_DMA_INT_SRC_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_SUPPORT_TRANSMIT_DMA
    default "INT_SOURCE_DMA_0" if DRV_USART_XMIT_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_0"
    default "INT_SOURCE_DMA_1" if DRV_USART_XMIT_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_1"
    default "INT_SOURCE_DMA_2" if DRV_USART_XMIT_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_2"
    default "INT_SOURCE_DMA_3" if DRV_USART_XMIT_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_3"
    default "INT_SOURCE_DMA_4" if DRV_USART_XMIT_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_4"
    default "INT_SOURCE_DMA_5" if DRV_USART_XMIT_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_5"
    default "INT_SOURCE_DMA_6" if DRV_USART_XMIT_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_6"
    default "INT_SOURCE_DMA_7" if DRV_USART_XMIT_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_7"

config DRV_USART_RCV_DMA_INT_SRC_IDX${INSTANCE}
    string
    depends on USE_DRV_USART
    depends on DRV_USART_SUPPORT_RECEIVE_DMA
    default "INT_SOURCE_DMA_0" if DRV_USART_RCV_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_0"
    default "INT_SOURCE_DMA_1" if DRV_USART_RCV_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_1"
    default "INT_SOURCE_DMA_2" if DRV_USART_RCV_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_2"
    default "INT_SOURCE_DMA_3" if DRV_USART_RCV_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_3"
    default "INT_SOURCE_DMA_4" if DRV_USART_RCV_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_4"
    default "INT_SOURCE_DMA_5" if DRV_USART_RCV_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_5"
    default "INT_SOURCE_DMA_6" if DRV_USART_RCV_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_6"
    default "INT_SOURCE_DMA_7" if DRV_USART_RCV_DMA_CH_IDX${INSTANCE} = "DMA_CHANNEL_7"

config DRV_USART_POWER_STATE_IDX${INSTANCE}
    string "Power State"
    depends on USE_DRV_USART
    range SYS_MODULE_POWER_STATE
    default "SYS_MODULE_POWER_RUN_FULL"
    ---help---
    IDH_HTML_SYS_MODULE_INIT
    ---endhelp---

endif
endif

